/** 
 * @(#)Advertisement.java 1.0.0 2016年8月17日 上午11:22:19  
 *  
 * Copyright © 2016 善林金融.  All rights reserved.  
 */

package com.slfinance.redpack.core.controller;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EnumType;
import javax.persistence.Enumerated;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.slfinance.redpack.core.constants.TableConstant;
import com.slfinance.redpack.core.constants.enums.AdvertisementRecordType;
import com.slfinance.redpack.core.constants.enums.AdvertisementStatus;
import com.slfinance.redpack.core.constants.enums.AdvertisementType;
import com.slfinance.redpack.core.constants.enums.AdvertisementUserType;
import com.slfinance.redpack.core.constants.enums.CustomerRelationType;
import com.slfinance.redpack.core.controller.base.BaseController;
import com.slfinance.redpack.core.entities.Advertisement;
import com.slfinance.redpack.core.entities.AdvertisementAnswer;
import com.slfinance.redpack.core.entities.File;
import com.slfinance.redpack.core.entities.FileRelation;
import com.slfinance.redpack.core.entities.RedPack;
import com.slfinance.redpack.core.exception.SLException;
import com.slfinance.redpack.core.extend.fastjson.Serialize;
import com.slfinance.redpack.core.extend.fastjson.SerializeRule;
import com.slfinance.redpack.core.extend.jpa.page.PageRequestVo;
import com.slfinance.redpack.core.extend.validate.annotations.Rule;
import com.slfinance.redpack.core.extend.validate.annotations.Rules;
import com.slfinance.redpack.core.response.ResponseVo;
import com.slfinance.redpack.core.services.AdvertisementAnswerService;
import com.slfinance.redpack.core.services.AdvertisementService;
import com.slfinance.redpack.core.services.CodeGeneratorService;
import com.slfinance.redpack.core.services.CustomerRelationService;
import com.slfinance.redpack.core.services.FileRelationService;
import com.slfinance.redpack.core.services.FileService;
import com.slfinance.redpack.core.services.RedPackService;
import com.slfinance.redpack.core.utils.FormatPrefixUrl;
import com.slfinance.redpack.core.vo.AdvertisementVo;
import com.slfinance.redpack.core.vo.AppSaveAdvertisementVo;

/**
 * 
 * 
 * @author SangLy
 * @version $Revision:1.0.0, $Date: 2016年8月17日 上午11:22:19 $
 */
@RestController
@RequestMapping(value = "advertisement", method = RequestMethod.POST)
public class AdvertisementController extends BaseController {

	@Autowired
	AdvertisementService advertisementService;
	
	@Autowired
	private CustomerRelationService customerRelationService;
	
	@Autowired
	private RedPackService redpackService;

	@Autowired
	private FileRelationService fileRelationService;
	
	@Autowired
	private FileService fileService;
	
	@Autowired
	private AdvertisementAnswerService advertisementAnswerService;
	
	@Autowired
	private CodeGeneratorService codeGeneratorService;
	
	/**
	 * app-获取启动页广告
	 * 
	 * @author SangLy
	 * @createTime 2016年8月17日 下午2:38:10
	 * @return
	 * @throws SLException
	 */
	@RequestMapping("findStartPageAdvertisement")
	public ResponseVo appFindStartPageAdvertisement() throws SLException {
		return ResponseVo.success("data", FormatPrefixUrl.addStaticResourceProxyURI(staticResourceProxyURI,advertisementService.appFindStartPageAdvertisementPhotoList(),new String []{"pathURL"}));
	}
	
	/**
	 * app-获取广告详情 { "id":"cc03583e-2219-45fd-bac8-aeae3ff626d3" }
	 * 
	 * @author SangLy
	 * @createTime 2016年11月3日15:24:03
	 * @param params
	 * @return
	 */
	@RequestMapping("detail")
	@Rules({ @Rule(name = "id", required = true, requiredMessage = "500010") })
	public ResponseVo appDetail(@RequestBody Map<String, Object> params) throws SLException{
		Map<String, Object> result = new HashMap<String, Object>();
		Advertisement advertisement = advertisementService.findOne(MapUtils.getString(params, "id"));
		if (advertisement != null) {
			result.put("id", advertisement.getId());
			result.put("content", advertisement.getContent());
			result.put("hyperlink", FormatPrefixUrl.addDomainNameAndFormatAppAdvertisementClickRedirectUrl(domainName,advertisement.getId(),advertisement.getHyperlink()));
			List<Map<String, Object>> files = fileService.findByRelateTableAndRelatePrimaryPathURL(TableConstant.T_ADVERTISEMENT, advertisement.getId());
			result.put("files", FormatPrefixUrl.addStaticResourceProxyURI(staticResourceProxyURI,files,new String []{"pathURL"}));
		}else{
			throw new SLException("500011", "have not find advertisement");
		}
		return ResponseVo.success(result);
	}
	
	/**
	 * app-每日任务
	 * 
	 * @author SangLy
	 * @createTime 2016年8月18日 上午9:58:19
	 * @return
	 */
	@RequestMapping("dailyTask")
	public ResponseVo appDailyTask() {
		Map<String, Object> result = new HashMap<String, Object>();
		Advertisement advertisement = advertisementService.dailyQuest();
		if (advertisement != null) {
			result.put("shareAdvertisementId", advertisement.getId());
			Date systemTime = new Date();
			//是否完成分享任务
			List<Map<String, Object>> hongbaofenxiangList = customerRelationService.findListCustomerIdAndRelateTableAndRelatePrimaryAndTypeAndDay(systemTime, getLoginUserId(), TableConstant.T_ADVERTISEMENT, advertisement.getId(), CustomerRelationType.广告分享);
			if (hongbaofenxiangList.size() > 0) {
				result.put("shareTaskFinish", true);
			}else{
				result.put("shareTaskFinish", false);
			}
			//是否完成分邀请任务
			List<Map<String, Object>> hongbaoyaoqingList = customerRelationService.findListCustomerIdAndRelateTableAndTypeAndDay(systemTime, getLoginUserId(), CustomerRelationType.好友邀请);
			List<Map<String, Object>> userRegisterLog = customerRelationService.findListRelatePrimaryAndRelateTableAndTypeAndDay(systemTime, getLoginUserId(), CustomerRelationType.好友邀请);
			if (hongbaoyaoqingList.size() > 0 || userRegisterLog.size() > 0) {
				result.put("inviteTaskFinish", true);
			}else{
				result.put("inviteTaskFinish", false);
			}
		}
		return ResponseVo.success(result);
	}
	
	/**
	 * app-广告分享
	 * @author SangLy
	 * @createTime 2016年8月18日 下午6:40:19
	 * @param params
	 * @return
	 */
	@RequestMapping("share")
	@Rules({ @Rule(name = "id", required = true, requiredMessage = "500010") })
	public ResponseVo appShare(@RequestBody Map<String, Object> params) {
		advertisementService.appShare(MapUtils.getString(params, "id"),getLoginUserId());
		return ResponseVo.success();
	}
	
	/**
	 * app-登录用户的分享
	 * @author SangLy
	 * @createTime 2016年8月18日 下午6:40:19
	 * @param params
	 * @return
	 */
	@RequestMapping("loginShare")
	@Rules({ @Rule(name = "id", required = true, requiredMessage = "500010") })
	public ResponseVo appLoginShare(@RequestBody Map<String, Object> params) {
		advertisementService.appShare(MapUtils.getString(params, "id"), getLoginUserId());
		return ResponseVo.success();
	}
	
	/**
	 * app-点击广告
	 * @author SangLy
	 * @createTime 2016年8月18日 下午6:40:19
	 * @param params
	 * @return
	 */
	@RequestMapping("click")
	@Rules({ @Rule(name = "id", required = true, requiredMessage = "500010") })
	public ResponseVo appClick(@RequestBody Map<String, Object> params) {
		advertisementService.appClick(MapUtils.getString(params, "id"), getLoginUserId());
		return ResponseVo.success();
	}
	
	/**
	 * app-获取广告详情 { "id":"cc03583e-2219-45fd-bac8-aeae3ff626d3" }
	 * 
	 * @author SangLy
	 * @createTime 2016年11月2日16:58:32
	 * @param params
	 * @return
	 */
	@RequestMapping("detailByRedpackId")
	@Rules({ @Rule(name = "id", required = true, requiredMessage = "600001") })
	public ResponseVo appDetailByRedpackId(@RequestBody Map<String, Object> params) {
		Map<String, Object> result = new HashMap<String, Object>();
		RedPack redpack = redpackService.findById(MapUtils.getString(params, "id"));
		if (redpack == null) {
			return ResponseVo.success(result);
		}
		Advertisement advertisement = advertisementService.findById(redpack.getAdvertisementId());
		if (advertisement != null) {
			result.put("id", advertisement.getId());
			result.put("redpackType", redpack.getRedpackType());
			result.put("content", advertisement.getContent());
			result.put("advertiserName", advertisement.getAdvertiserName());
			result.put("sharedURL", FormatPrefixUrl.addDomainNameAndFormatAppShareAdUrl(domainName, advertisement.getId(), redpack.getId()));
			result.put("hyperlink", FormatPrefixUrl.addDomainNameAndFormatAppAdvertisementClickRedirectUrl(domainName, (String) advertisement.getId(), (String) advertisement.getHyperlink()));
			List<Map<String, Object>> filesList = new ArrayList<Map<String, Object>>();
			List<FileRelation> FileRelationLsit = fileRelationService.findByAdvertisementAndRelatePrimary(advertisement.getId());
			for (FileRelation fileRelation : FileRelationLsit) {
				Map<String, Object> file = new HashMap<String, Object>();
				File fileInstance = fileService.findOne(fileRelation.getFileId());
				if (fileInstance != null) {
					file.put("fileType", fileInstance.getFileType());
					file.put("pathURL", staticResourceProxyURI+fileInstance.getPath());
				}
				filesList.add(file);
			}
			result.put("files", filesList);
			List<Map<String, Object>> answerList = new ArrayList<Map<String, Object>>();
			List<AdvertisementAnswer> AdvertisementAnswerLsit = advertisementAnswerService.findAnswerListByAdvertisementId(advertisement.getId());
			for (AdvertisementAnswer advertisementAnswer : AdvertisementAnswerLsit) {
				Map<String, Object> answer = new HashMap<String, Object>();
				answer.put("id", advertisementAnswer.getId());
				answer.put("answerContent", advertisementAnswer.getAnswerContent());
				answerList.add(answer);
			}
			result.put("answers", answerList);
			result.put("systemTime", new Date());
			result.put("timePoint", redpack.getTimePoint());
		}
		return ResponseVo.success(result);
	}
	
	/**
	 * app-广告是否已分享
	 * 
	 * @author SangLy
	 * @createTime 2016年11月2日20:26:48
	 * @param pageRequest
	 * @return
	 */
	@RequestMapping("hasShared")
	@Rules({ @Rule(name = "id", required = true, requiredMessage = "500010") })
	public ResponseVo appHasAppointment(@RequestBody Map<String, Object> params) {
		Map<String, Object> result = new HashMap<String,Object>();
		result.put("hasAppointment", advertisementService.hasShared(MapUtils.getString(params, "id"), getLoginUserId()));
		return ResponseVo.success(result);
	}
	
	
	/**
	 * app-获取广告详情 { "id":"cc03583e-2219-45fd-bac8-aeae3ff626d3" }
	 * 
	 * @author SangLy
	 * @createTime 2016年11月2日16:58:32
	 * @param params
	 * @return
	 */
	@RequestMapping("editInfo")
	@Rules({ @Rule(name = "id", required = true, requiredMessage = "500010") })
	public ResponseVo appEditInfo(@RequestBody Map<String, Object> params) {
		Map<String, Object> result = new HashMap<String, Object>();
		Advertisement advertisement = advertisementService.findOne(MapUtils.getString(params, "id"));
		if (advertisement != null) {
			result.put("id", advertisement.getId());
			result.put("title", advertisement.getTitle());
			result.put("logo", advertisement.getLogo()); //直接是数据库的内容
			result.put("logoUrl", staticResourceProxyURI+advertisement.getLogo()); //需要添加代理域名前缀
			result.put("content", advertisement.getContent());
			result.put("hyperlink", FormatPrefixUrl.addDomainNameAndFormatAppAdvertisementClickRedirectUrl(domainName, (String) advertisement.getId(), (String) advertisement.getHyperlink()));
			List<Map<String, Object>> filesList = new ArrayList<Map<String, Object>>();
			List<FileRelation> FileRelationLsit = fileRelationService.findByAdvertisementAndRelatePrimary(advertisement.getId());
			for (FileRelation fileRelation : FileRelationLsit) {
				Map<String, Object> file = new HashMap<String, Object>();
				File fileInstance = fileService.findOne(fileRelation.getFileId());
				if (fileInstance != null) {
					file.put("id", fileInstance.getId());
					file.put("fileType", fileInstance.getFileType());
					file.put("pathURL", staticResourceProxyURI+fileInstance.getPath()); //需要添加域名钱缀
				}
				filesList.add(file);
			}
			result.put("files", filesList);
			List<Map<String, Object>> answerList = new ArrayList<Map<String, Object>>();
			List<AdvertisementAnswer> AdvertisementAnswerLsit = advertisementAnswerService.findAnswerListByAdvertisementId(advertisement.getId());
			for (AdvertisementAnswer advertisementAnswer : AdvertisementAnswerLsit) {
				Map<String, Object> answer = new HashMap<String, Object>();
				answer.put("id", advertisementAnswer.getId());
				answer.put("answerContent", advertisementAnswer.getAnswerContent());
				answerList.add(answer);
			}
			result.put("answers", answerList);
			result.put("correctAnswer", advertisement.getCorrectAnswer());
		}
		return ResponseVo.success(result);
	}
	
	/**
	 * app-获取广告列表
	 * 
	 * @author SangLy
	 * @createTime 2016年8月17日 上午11:21:10
	 * @param pageRequest
	 * @return
	 * @throws SLException
	 */
	@RequestMapping("list")
	public ResponseVo appList(PageRequestVo pageRequest) throws SLException {
		pageRequest.addParam("customerId", getLoginUserId());
		return ResponseVo.success(FormatPrefixUrl.addStaticResourceProxyURI(staticResourceProxyURI,advertisementService.advertisementList(pageRequest),new String []{"logoUrl"}));
	}

	/**
	 * app-获取所有广告(下拉框用到)
	 * 
	 * @author SangLy
	 * @createTime 2016年8月17日 上午11:21:10
	 * @param pageRequest
	 * @return
	 * @throws SLException
	 */
	@RequestMapping("selectList")
	@Serialize({ @SerializeRule(clazz = Advertisement.class, include = { "id", "title" }) })
	public ResponseVo appSelectList(PageRequestVo pageRequest) throws SLException {
		pageRequest.addParam("customerId", getLoginUserId());
		return ResponseVo.success(advertisementService.advertisementList(pageRequest));
	}
	
	/**
	 * 新增|修改
	 * 
	 * @author SangLy
	 * @createTime 2016年8月16日 下午3:14:56
	 * @param advertisementVo
	 * @return
	 */
	@SuppressWarnings(value = { "unchecked" })
	@RequestMapping("/save")
	@Rules({@Rule(name = "title", required = true, requiredMessage = "100000") ,@Rule(name = "logo", required = true, requiredMessage = "100000") ,@Rule(name = "content", required = true, requiredMessage = "100000")})
	public ResponseVo appSave(@RequestBody Map<String, Object> params) {

		Advertisement advertisement = null;

		if (StringUtils.isBlank(MapUtils.getString(params, "id"))) {// 新增
			advertisement = new Advertisement();
			advertisement.setAdvertisementCode(codeGeneratorService.getAdvertisementCode()); // 生成广告编号
		} else {// 修改
			advertisement = advertisementService.findOne(MapUtils.getString(params, "id"));
			if (advertisement == null) {
				throw new SLException("500011");
			}
		}
		advertisement.setLogo(MapUtils.getString(params, "logo"));
		advertisement.setContent(MapUtils.getString(params, "content")); // 广告内容|题目

		List<Map<String, Object>> files = (List<Map<String, Object>>) params.get("files");
		List<Map<String, Object>> answers = (List<Map<String, Object>>) params.get("answers");

		if (files == null || answers == null) {
			throw new SLException("100000", "参数不合法");
		}
		if (files.size() == 0 || answers.size() == 0) {
			throw new SLException("100000", "参数不合法");
		}
		advertisement.setType(AdvertisementType.红包广告);
		advertisement.setTitle(MapUtils.getString(params, "title"));
		advertisement.setHyperlink(MapUtils.getString(params, "hyperlink"));
		advertisement.setUserType(AdvertisementUserType.前台);
		advertisement.setCorrectAnswer(MapUtils.getString(params, "correctAnswer"));
		advertisementService.appSaveAdvertisement(advertisement, files, answers);
		return ResponseVo.success();
	}
	
	/**
	 * app-用户移除广告
	 * 
	 * @author SangLy
	 * @createTime 2016年11月3日 下午8:13:26
	 * @param redpackId
	 * @param customerId
	 */
	@RequestMapping("remove")
	@Rules({ @Rule(name = "id", required = true, requiredMessage = "500010") })
	public ResponseVo appRemoveAdvertisement(@RequestBody Map<String, Object> params) {
		advertisementService.removeAdvertisementById(MapUtils.getString(params, "id"), getLoginUserId());
		return ResponseVo.success();
	}
}
