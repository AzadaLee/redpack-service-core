package com.slfinance.redpack.core.services;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.collect.Lists;
import com.slfinance.redpack.common.utils.DateUtil;
import com.slfinance.redpack.common.utils.StringUtil;
import com.slfinance.redpack.core.constants.AlipayServiceEnvConstants;
import com.slfinance.redpack.core.constants.CommonConstant;
import com.slfinance.redpack.core.constants.RedPackConstant;
import com.slfinance.redpack.core.constants.enums.AccountFlowTradeDirection;
import com.slfinance.redpack.core.constants.enums.AccountFlowflowType;
import com.slfinance.redpack.core.constants.enums.AccountType;
import com.slfinance.redpack.core.constants.enums.BusinessType;
import com.slfinance.redpack.core.constants.enums.CustomerStatus;
import com.slfinance.redpack.core.constants.enums.MessageTemplateMessageType;
import com.slfinance.redpack.core.constants.enums.OrderStatus;
import com.slfinance.redpack.core.constants.enums.OrderType;
import com.slfinance.redpack.core.constants.enums.RecordType;
import com.slfinance.redpack.core.constants.enums.RedpackStatus;
import com.slfinance.redpack.core.constants.enums.WithdrawStatus;
import com.slfinance.redpack.core.entities.Account;
import com.slfinance.redpack.core.entities.AccountFlow;
import com.slfinance.redpack.core.entities.Advertisement;
import com.slfinance.redpack.core.entities.Bank;
import com.slfinance.redpack.core.entities.Customer;
import com.slfinance.redpack.core.entities.Order;
import com.slfinance.redpack.core.entities.RedPack;
import com.slfinance.redpack.core.entities.Withdraw;
import com.slfinance.redpack.core.exception.SLException;
import com.slfinance.redpack.core.extend.jpa.page.PageRequestVo;
import com.slfinance.redpack.core.extend.jpa.page.PageResponse;
import com.slfinance.redpack.core.repositories.AccountRepository;
import com.slfinance.redpack.core.response.ResponseCode;
import com.slfinance.redpack.core.response.ResponseVo;
import com.slfinance.redpack.core.services.base.BaseService;
import com.slfinance.redpack.core.utils.RedPackUtils;
import com.slfinance.redpack.core.utils.SpringUtils;
import com.slfinance.redpack.core.vo.AccountFlowExportVo;

@Service
public class AccountService extends BaseService<Account, AccountRepository> {

	@Autowired
	private CodeGeneratorService codeGeneratorService;

	@Autowired
	private AccountFlowService accountFlowService;

	@Autowired
	private WithdrawService withdrawService;

	@Autowired
	private CustomerService customerService;

	@Autowired
	private VerificationCodeService verificationCodeService;

	@Autowired
	private BankService bankService;

	@Autowired
	private OrderService orderService;

	@Autowired
	private AdvertisementService advertisementService;

	@Autowired
	private RedPackService redPackService;
	
	@Autowired
	private MessageService messageService;

	/**
	 * 系统账户充值
	 * 
	 * @param amount
	 * @param memo
	 * @return
	 */
	@Transactional(rollbackFor = SLException.class)
	public Account systemRecharge(Double amount, String memo) {
		Account account = findSystemAccount();
		// 记录流水
		AccountFlow accountFlow = new AccountFlow(account.getId(), codeGeneratorService.getFlowCode(), AccountFlowflowType.充值, amount, AccountFlowTradeDirection.收入, null, null, "系统充值");
		settle(account, accountFlow);
		accountFlowService.save(accountFlow);
		return save(account);
	}

	/**
	 * 提现审核
	 * 
	 * @param withdrawId
	 * @param memo
	 * @param auditStatus
	 */
	@Transactional
	public ResponseVo withdrawAudit(String withdrawId, String memo, WithdrawStatus auditStatus) {
		ResponseVo responseVo = ResponseVo.success();
		Withdraw withdraw = withdrawService.findOne(withdrawId);
		if (null == withdraw) {
			throw new SLException("110007");
		}
		if (WithdrawStatus.待处理 != withdraw.getStatus()) {
			throw new SLException("110008");
		}
		Customer customer = customerService.findById(withdraw.getCustomerId());
		AccountService self = SpringUtils.getBean(AccountService.class);

		// 防止脏数据，
		if (null == customer) {
			withdraw.setStatus(WithdrawStatus.提现失败);
			withdrawService.save(withdraw);
			return ResponseVo.fail("111111", "该笔提现申请对应的客户不存在");
		}
		Account account = repository.findByCustomerId(customer.getId());
		if (null == account) {
			withdraw.setStatus(WithdrawStatus.提现失败);
			withdrawService.save(withdraw);
			return ResponseVo.fail("111111", "账户信息不存在，审核失败");
		}
		AccountFlow oldFlow = accountFlowService.findByRelatePrimary(withdrawId);
		if (null == oldFlow) {
			withdraw.setStatus(WithdrawStatus.提现失败);
			withdrawService.save(withdraw);
			return ResponseVo.fail("111111", "原冻结流水信息不存在，审核失败");
		}
		// 判断用户状态
		if (customer.getStatus() != CustomerStatus.正常) {
			self.doWithdrawAudit(false, withdraw, account, oldFlow, "客户状态异常");
			return ResponseVo.fail("111111", "客户状态异常，审核失败");
		}
		if (auditStatus == WithdrawStatus.提现成功) {
			self.doWithdrawAudit(true, withdraw, account, oldFlow, memo);
		} else {
			self.doWithdrawAudit(false, withdraw, account, oldFlow, memo);
		}
		return responseVo;
	}

	/**
	 * 处理审核结果
	 * 
	 * @param isSuccess
	 * @param withdraw
	 */
	@Transactional
	public boolean doWithdrawAudit(boolean isSuccess, Withdraw withdraw, Account account, AccountFlow oldFlow, String memo) {
		List<AccountFlow> accountFlows = Lists.newArrayList();
		Bank bank = bankService.findOne(withdraw.getBankId());
		if (isSuccess) {
			withdraw.setStatus(WithdrawStatus.提现成功);

			// 解冻流水
			AccountFlow unfreezeAccountFlow = new AccountFlow(account.getId(), codeGeneratorService.getFlowCode(), AccountFlowflowType.提现解冻, withdraw.getAmount(), AccountFlowTradeDirection.解冻, withdraw.getId(), oldFlow.getFlowCode(), "转出解冻(提现成功)");
			settle(account, unfreezeAccountFlow);
			accountFlows.add(unfreezeAccountFlow);

			// 提现流水
			AccountFlow withdrawAccountFlow = new AccountFlow(account.getId(), codeGeneratorService.getFlowCode(), AccountFlowflowType.提现, withdraw.getAmount(), AccountFlowTradeDirection.支出, withdraw.getId(), null, "转出到\"" + StringUtil.left(bank.getBankCode(), 4) + "......" + StringUtil.right(bank.getBankCode(), 4) + "\"");
			withdrawAccountFlow.setMemo("提现成功");
			settle(account, withdrawAccountFlow);
			accountFlows.add(withdrawAccountFlow);
		} else {
			// 提现失败
			withdraw.setStatus(WithdrawStatus.提现失败);

			// 解冻流水
			AccountFlow unfreezeAccountFlow = new AccountFlow(account.getId(), codeGeneratorService.getFlowCode(), AccountFlowflowType.提现解冻, withdraw.getAmount(), AccountFlowTradeDirection.解冻, withdraw.getId(), oldFlow.getFlowCode(), "转出解冻(提现失败)");
			settle(account, unfreezeAccountFlow);
			accountFlows.add(unfreezeAccountFlow);
		}
		accountFlowService.save(accountFlows);
		withdrawService.save(withdraw);
		save(account);
		return true;
	}

	public PageResponse<Map<String, Object>> withdrawList(PageRequestVo pageRequest) {
		return repository.withdrawList(pageRequest);
	}

	public PageResponse<Map<String, Object>> flowList(PageRequestVo pageRequest) {
		if (pageRequest.getParam("accountType") == null || StringUtils.isBlank((String) pageRequest.getParam("accountType"))) {
			throw new SLException("110010");
		}
		return repository.flowList(pageRequest);
	}

	public List<Map<String, Object>> flowExport(AccountFlowExportVo accountFlowExportVo, int monthsBetween) {
		String endDate = accountFlowExportVo.getEndDate();
		String startDate = accountFlowExportVo.getStartDate();
		Date endDateD = null;
		Date startDateD = null;
		// 1、判断并设置开始和结束时间
		if (StringUtils.isBlank(endDate) && StringUtils.isBlank(startDate)) {
			endDateD = DateUtil.getToday();
			startDateD = DateUtil.addMonths(endDateD, -monthsBetween);
		} else if ((!StringUtils.isBlank(endDate)) && StringUtils.isBlank(startDate)) {
			endDateD = DateUtil.parseToDate(endDate, "yyyy-MM-dd");
			startDateD = DateUtil.addMonths(endDateD, -monthsBetween);
		} else if ((!StringUtils.isBlank(startDate)) && StringUtils.isBlank(endDate)) {
			startDateD = DateUtil.parseToDate(startDate, "yyyy-MM-dd");
			endDateD = DateUtil.addMonths(startDateD, monthsBetween);
		} else {
			endDateD = DateUtil.parseToDate(endDate, "yyyy-MM-dd");
			startDateD = DateUtil.parseToDate(startDate, "yyyy-MM-dd");
		}
		// 2、判断时间跨度是否大于3个月
		if (DateUtil.addMonths(startDateD, monthsBetween).compareTo(endDateD) < 0) {
			throw new SLException("600008");
		}
		accountFlowExportVo.setEndDate(new SimpleDateFormat("yyyy-MM-dd").format(endDateD));
		accountFlowExportVo.setStartDate(new SimpleDateFormat("yyyy-MM-dd").format(startDateD));
		return repository.flowExport(accountFlowExportVo);
	}

	public Account findBycustomerId(String customerId) {
		return repository.findByCustomerId(customerId);
	}

	/**
	 * app-忘记密码(根据验证码重置交易密码)
	 * 
	 * @author SangLy
	 * @createTime 2016年8月15日 下午6:45:56
	 * @param verificationCode
	 *            验证码
	 * @param password
	 *            密码
	 * @throws SLException
	 */
	@Transactional
	public void appResetPassword(String customerId, String verificationCode, String accountPassword) throws SLException {
		Customer customer = customerService.findOne(customerId);
		if (customer == null) {
			throw new SLException("120027", "Binding this mobile person is not exists in customer table!");
		}
		verificationCodeService.settingVerificationInvalid(customer.getMobile(), verificationCode, BusinessType.交易密码找回);
		Account customerAccount = repository.findBycustomerId(customer.getId());
		if (customerAccount != null) {
			customerAccount.setAccountPassword(accountPassword);
			update(customerAccount);
		} else {
			throw new SLException("110012", "account not found");
		}

	}

	/**
	 * app-app-修改交易密码(根据旧密码更新密码)
	 * 
	 * @author SangLy
	 * @createTime 2016年8月15日 下午6:52:24
	 * @param oldPassword
	 *            旧密码
	 * @param newPassword
	 *            新密码
	 * @param loginUser
	 *            登录用户
	 * @throws SLException
	 */
	@Transactional
	public void appUpdatePassword(String oldPassword, String newPassword, String customerId) throws SLException {
		Customer customer = customerService.findOne(customerId);
		if (customer == null) {
			throw new SLException("120027", "Binding this mobile person is not exists in customer table!");
		}
		Account customerAccount = repository.findBycustomerId(customer.getId());
		if (customerAccount != null) {
			if (!oldPassword.equals(customerAccount.getAccountPassword())) {
				throw new SLException("120031", "Old password is wrong!");
			}
			if (newPassword.equals(oldPassword)) {
				throw new SLException("120052", "New password can not be consistent with old password!");
			}
			customerAccount.setAccountPassword(newPassword);
			update(customerAccount);
		} else {
			throw new SLException("110012", "account not found");
		}
	}

	/**
	 * 根据客户查询客户信息
	 * 
	 * @author SangLy
	 * @createTime 2016年11月7日 上午11:29:51
	 * @param customerId
	 * @return
	 */
	public Account findAccountByCustomerId(String customerId) {
		return repository.findBycustomerId(customerId);
	}

	/**
	 * app-提现申请
	 * 
	 * @author SangLy
	 * @createTime 2016年11月7日 上午10:53:17
	 * @param params
	 * @return
	 * @throws SLException
	 */
	@Transactional
	public void withdrawApply(Double amount, String password, String customerId) throws SLException {
		Account account = repository.findByCustomerId(customerId);

		try {
			if(StringUtils.isBlank(account.getAccountPassword())){
				throw new SLException("100029", "请设置交易密码");
			}
			if (!RedPackUtils.encryptionPassword(password, BusinessType.交易密码找回).equals(account.getAccountPassword())) {
				throw new SLException("100028", "交易密码错误");
			}
		} catch (Exception e) {
			throw new SLException("100028", "交易密码错误");
		}

		if (amount < 5) {
			throw new SLException("230002", "提现金额最低为5元");
		}
		// 查询当月提现申请次数，
		Long applyCount = withdrawService.countMonthWithdrawbyCustomerId(customerId, new Date());
		if (applyCount >= 2) {
			throw new SLException("230003", "每月申请提现次数最多为2次");
		}
		// 查询账户
		Account customerAccount = repository.findBycustomerId(customerId);
		if (customerAccount != null) {
			if (customerAccount.getAvailableAmount() - amount >= 0) {
				AccountFlow accountFlow = new AccountFlow(customerAccount.getId(), codeGeneratorService.getFlowCode(), AccountFlowflowType.提现冻结, amount, AccountFlowTradeDirection.冻结, null, null, "转出冻结)");
				settle(customerAccount, accountFlow);
				
				// 流水表_新增记录
				accountFlow = accountFlowService.save(accountFlow);
				// 修改账户表
				save(customerAccount);

				// 新增银行卡副本
				Bank customerBank = bankService.findBycustomerId(customerId);
				Bank copyCustomerBank = customerBank.createDuplicate(Bank.class);
				copyCustomerBank.setRecordType(RecordType.副本);
				Bank newCppyCustomerBank = bankService.save(copyCustomerBank);

				// 提现申请表_新增记录
				Withdraw withdraw = new Withdraw();
				withdraw.setCustomerId(customerId);
				withdraw.setWithdrawCode(codeGeneratorService.getWithdrawCode());
				withdraw.setBankId(newCppyCustomerBank.getId());
				withdraw.setAmount(amount);
				withdraw.setFlowId(accountFlow.getId());
				withdraw.setStatus(WithdrawStatus.待处理);
				withdraw = withdrawService.save(withdraw);

				//设置流水的关联主键为提现申请表的id
				accountFlow.setRelatePrimary(withdraw.getId());
				accountFlowService.save(accountFlow);
				
				 //提现申请成功，发站内信
				messageService.sendMessage(MessageTemplateMessageType.转出成功, customerId, withdraw.getId());
			} else {
				throw new SLException("230004", "账户余额不足");
			}
		} else {
			throw new SLException("230005", "账户不存在");
		}
	}

	/**
	 * 根据客户id 创建账户
	 * 
	 * @author SangLy
	 * @createTime 2016年11月8日 上午11:14:11
	 * @param customerId
	 */
	@Transactional
	public void saveNewAccount(String customerId) {
		Account account = new Account();
		account.setCustomerId(customerId);
		String accountCode = codeGeneratorService.getAccountCode();
		while (repository.findFirstByAccountCode(accountCode) != null) {
			accountCode = codeGeneratorService.getAccountCode();
		}
		account.setAccountCode(accountCode);
		account.setTotalAmount(0.00);
		account.setAvailableAmount(0.00);
		account.setFreezeAmount(0.00);
		account.setAccountType(AccountType.用户账户);
		repository.save(account);
	}

	/**
	 * app-发红包支付(订单支付)(/account/submitOrder)
	 * 
	 * @author SangLy
	 * @createTime 2016年11月7日 上午11:43:31
	 * @param params
	 * @return
	 * @throws SLException
	 */
	@Transactional
	public String appSubmitOrder(String orderId, String password, String customerId) {
		Account account = repository.findByCustomerId(customerId);
		if (!RedPackUtils.encryptionPassword(password, BusinessType.交易密码找回).equals(account.getAccountPassword())) {
			throw new SLException("100028", "交易密码错误");
		}
		Order payOrder = orderService.findOne(orderId);
		if (payOrder == null) {
			throw new SLException("240002", "订单不存在");
		}
		Advertisement advertisement = advertisementService.findByRedpackId(payOrder.getRelatePrimary());
		if (advertisement == null) {
			throw new SLException("240002", "订单不存在");
		}
		RedPack redpack = redPackService.findOne(payOrder.getRelatePrimary());
		// 查询账户余额是否够支付（订单金额）
		if (account.getAvailableAmount().compareTo(payOrder.getOrderAmount()) < 0) {
			throw new SLException("110011");
		}
		// 判断订单是否已经支付
		if (!RedpackStatus.待付款.equals(redpack.getStatus())) {
			throw new SLException("240005", "订单状态不正确");
		}
		//支付并生成冻结流水
		appSaveRedPackAccountFlow(account,redpack.getId(),payOrder.getOrderAmount());
	
		// 修改红包状态为，待审核
		redpack.setStatus(RedpackStatus.待审核);
		redPackService.save(redpack);
		
		//修改订单的状态为成功
		payOrder.setOrderStatus(OrderStatus.成功);
		orderService.save(payOrder);
		
		return payOrder.getRelatePrimary();//返回红包id
	}

	/**
	 * 获取系统账户
	 * 
	 * @author samson
	 * @createTime 2016年11月15日 下午1:42:48
	 * @return
	 */
	public Account findSystemAccount() {
		Account account = repository.findOne(CommonConstant.SYSTEM_ACCOUNT_ID);
		if (null == account) {
			throw new SLException("110003");
		}
		return account;
	}

	/**
	 * 订单结账
	 * 
	 * @author samson
	 * @createTime 2016年11月15日 下午1:47:36
	 * @param order
	 */
	@Transactional
	public void orderSettle(Order order) {
		Account account = findBycustomerId(order.getCustomerId());
		Account systemAccount = findSystemAccount();
		List<AccountFlow> accountFlows = Lists.newArrayList();
		List<Account> accounts = Lists.newArrayList();
		if (order.getOrderType() == OrderType.支付宝充值) {
			// 充值
			AccountFlow rechargeAccountFlow = new AccountFlow(account.getId(), codeGeneratorService.getAccountFlowCode(), AccountFlowflowType.充值, order.getOrderAmount(), AccountFlowTradeDirection.收入, order.getRelatePrimary(), null, "支付宝充值");
			settle(account, rechargeAccountFlow);

			// 手续费
			double rateAmount = new BigDecimal(order.getOrderAmount() * AlipayServiceEnvConstants.RATE).setScale(2, RoundingMode.CEILING).doubleValue();
			AccountFlow rateAccountFlow = new AccountFlow(systemAccount.getId(), codeGeneratorService.getAccountFlowCode(), AccountFlowflowType.充值手续费垫付, rateAmount, AccountFlowTradeDirection.支出, order.getRelatePrimary(), null, "充值手续费垫付");
			settle(systemAccount, rateAccountFlow);

			accounts.add(account);
			accounts.add(systemAccount);
			accountFlows.add(rechargeAccountFlow);
			accountFlows.add(rateAccountFlow);

		} else {
			throw new SLException(ResponseCode.SERVER_ERROR, "not support order type");
		}

		order.setOrderStatus(OrderStatus.成功);
		repository.save(accounts);
		accountFlowService.save(accountFlows);
		orderService.save(order);
	}

	/**
	 * 结账(根据流水的交易方向和交易金额对账户进行相应的加减算法，并设置流水表中的交易后的相应金额)
	 * 
	 * @author samson
	 * @createTime 2016年11月15日 下午1:59:31
	 * @param account
	 *            待结账账户
	 * @param accountFlow
	 *            结账流水
	 */
	private void settle(Account account, AccountFlow accountFlow) {
		if (accountFlow.getTradeDirection() == AccountFlowTradeDirection.收入) {
			account.setAvailableAmount(account.getAvailableAmount() + accountFlow.getTradeAmount());
			account.setTotalAmount(account.getTotalAmount() + accountFlow.getTradeAmount());
		} else if (accountFlow.getTradeDirection() == AccountFlowTradeDirection.支出) {
			account.setAvailableAmount(account.getAvailableAmount() - accountFlow.getTradeAmount());
			account.setTotalAmount(account.getTotalAmount() - accountFlow.getTradeAmount());
		} else if (accountFlow.getTradeDirection() == AccountFlowTradeDirection.冻结) {
			account.setAvailableAmount(account.getAvailableAmount() - accountFlow.getTradeAmount());
			account.setFreezeAmount(account.getFreezeAmount() + accountFlow.getTradeAmount());
		} else if (accountFlow.getTradeDirection() == AccountFlowTradeDirection.解冻) {
			account.setAvailableAmount(account.getAvailableAmount() + accountFlow.getTradeAmount());
			account.setFreezeAmount(account.getFreezeAmount() - accountFlow.getTradeAmount());
		}
		accountFlow.setAccountAmount(account);
	}
	
	/**
	 * 未抢完红包返现
	 * 
	 * @author SangLy
	 * @createTime 2016年11月21日 下午5:28:58
	 */
	@Transactional
	public void returnCustomerNotRobRedpackMoney(String createdUserId, String redpackId, Double amount) {
		Account account = repository.findBycustomerId(createdUserId);
		// 红包退费
		AccountFlow rechargeAccountFlow = new AccountFlow(account.getId(), codeGeneratorService.getAccountFlowCode(), AccountFlowflowType.红包退费, amount, AccountFlowTradeDirection.收入, redpackId, null, "红包退款");
		settle(account, rechargeAccountFlow);
		repository.save(account);
		accountFlowService.save(rechargeAccountFlow);
	}
	
	/**
	 * 前端客户发红包流水
	 * 
	 * @author SangLy
	 * @createTime 2016年11月21日 下午5:28:58
	 */
	@Transactional
	public void appSaveRedPackAccountFlow(Account account, String redpackId, Double amount) {
		// 红包退费
		AccountFlow rechargeAccountFlow = new AccountFlow(account.getId(), codeGeneratorService.getAccountFlowCode(), AccountFlowflowType.红包冻结, amount, AccountFlowTradeDirection.冻结, redpackId, null, "红包冻结");
		settle(account, rechargeAccountFlow);
		repository.save(account);
		accountFlowService.save(rechargeAccountFlow);
	}
	
	/**
	 * 抢到红包流水
	 * 
	 * @author SangLy
	 * @createTime 2016年11月21日 下午5:28:58
	 */
	@Transactional
	public void robRedPackMoneyFlow(Account account, String redpackId, Double amount) {
		RedPack redpack = redPackService.findOne(redpackId);
		Advertisement advertisement = advertisementService.findOne(redpack.getAdvertisementId());
		AccountFlow rechargeAccountFlow = new AccountFlow(account.getId(), codeGeneratorService.getAccountFlowCode(), AccountFlowflowType.抢红包, amount, AccountFlowTradeDirection.收入, redpackId, null, "抢到红包\"" + StringUtil.cutAndPadding(advertisement.getTitle(), 10, "...", "...") + "\"");
		settle(account, rechargeAccountFlow);
		repository.save(account);
		accountFlowService.save(rechargeAccountFlow);
	}

}
