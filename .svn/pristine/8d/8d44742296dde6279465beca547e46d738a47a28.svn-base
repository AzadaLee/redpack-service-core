package com.slfinance.redpack.core.services;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.slfinance.redpack.common.utils.DateUtil;
import com.slfinance.redpack.core.constants.enums.AccountFlowTradeDirection;
import com.slfinance.redpack.core.constants.enums.AccountFlowflowType;
import com.slfinance.redpack.core.constants.enums.AccountType;
import com.slfinance.redpack.core.constants.enums.BankRecordType;
import com.slfinance.redpack.core.constants.enums.BusinessType;
import com.slfinance.redpack.core.constants.enums.CustomerStatus;
import com.slfinance.redpack.core.constants.enums.WithdrawStatus;
import com.slfinance.redpack.core.entities.Account;
import com.slfinance.redpack.core.entities.AccountFlow;
import com.slfinance.redpack.core.entities.Bank;
import com.slfinance.redpack.core.entities.Customer;
import com.slfinance.redpack.core.entities.Order;
import com.slfinance.redpack.core.entities.Withdraw;
import com.slfinance.redpack.core.exception.SLException;
import com.slfinance.redpack.core.extend.jpa.page.PageRequestVo;
import com.slfinance.redpack.core.extend.jpa.page.PageResponse;
import com.slfinance.redpack.core.repositories.AccountRepository;
import com.slfinance.redpack.core.response.ResponseVo;
import com.slfinance.redpack.core.services.base.BaseService;
import com.slfinance.redpack.core.utils.RedPackUtils;
import com.slfinance.redpack.core.utils.SpringUtils;
import com.slfinance.redpack.core.vo.AccountFlowExportVo;

@Service
public class AccountService extends BaseService<Account, AccountRepository>{
	
	@Autowired
	private CodeGeneratorService codeGeneratorService;
	
	@Autowired
	private AccountFlowService accountFlowService;
	
	@Autowired
	private WithdrawService withdrawService;

	@Autowired
	private CustomerService customerService;
	
	@Autowired
	private VerificationCodeService verificationCodeService;
	
	@Autowired
	private BankService bankService;
	
	@Autowired
	private OrderService orderService;
	
	/**
	 * 系统账户充值
	 * @param amount
	 * @param memo
	 * @return
	 */
	@Transactional(rollbackFor=SLException.class)
	public Account systemRecharge(Double amount, String memo) {
		String admin = "1";//系统账户id
		Account account = repository.findOne(admin);
		if(null == account){
			throw new SLException("110003");
		}
		//记录流水
		AccountFlow accountFlow = new AccountFlow();
		accountFlow.setAccountId(account.getId());
		accountFlow.setFlowType(AccountFlowflowType.充值);
		accountFlow.setFlowCode(codeGeneratorService.getFlowCode());
		accountFlow.setTradeDirection(AccountFlowTradeDirection.收入);
		accountFlow.setTradeAmount(amount);
		accountFlow.setTotalAmount(account.getTotalAmount()+amount);
		accountFlow.setAvailableAmount(account.getAvailableAmount()+amount);
		accountFlow.setFreezeAmount(account.getFreezeAmount());
		accountFlow.setTargetCustomerId(null);
		accountFlow.setOldFlowCode(null);
		accountFlow.setMemo(memo);
		
		account.setTotalAmount(account.getTotalAmount()+amount);
		account.setAvailableAmount(account.getAvailableAmount()+amount);
		accountFlowService.save(accountFlow);
		return save(account);
	}

	/**
	 * 提现审核
	 * @param withdrawId
	 * @param memo
	 * @param auditStatus
	 */
	@Transactional()
	public ResponseVo withdrawAudit(String withdrawId, String memo,WithdrawStatus auditStatus) {
		ResponseVo responseVo = ResponseVo.success();
		Withdraw withdraw = withdrawService.findOne(withdrawId);
		if(null == withdraw){
			throw new SLException("110007");
		}
		if(WithdrawStatus.待处理 != withdraw.getStatus()){
			throw new SLException("110008");
		}
		Customer customer = customerService.findById(withdraw.getCustomerId());
		AccountService self = SpringUtils.getBean(AccountService.class);
		
		//防止脏数据，
		if(null == customer){
			withdraw.setStatus(WithdrawStatus.提现失败);
			withdrawService.save(withdraw);
			return ResponseVo.fail("111111", "该笔提现申请对应的客户不存在");
		}
		Account account = repository.findByCustomerId(customer.getId());
		if(null == account){
			withdraw.setStatus(WithdrawStatus.提现失败);
			withdrawService.save(withdraw);
			return ResponseVo.fail("111111", "账户信息不存在，审核失败");
		}
		AccountFlow oldFlow = accountFlowService.findOne(withdrawId);
		if(null == oldFlow){
			withdraw.setStatus(WithdrawStatus.提现失败);
			withdrawService.save(withdraw);
			return ResponseVo.fail("111111", "原冻结流水信息不存在，审核失败");
		}
		//判断用户状态
		if(customer.getStatus() != CustomerStatus.正常){
			self.doWithdrawAudit(false, withdraw, account,oldFlow,"客户状态异常");
			throw new SLException("110009");
		}
		if(auditStatus == WithdrawStatus.提现成功){
			self.doWithdrawAudit(true, withdraw, account,oldFlow,memo);
		}else{
			self.doWithdrawAudit(false, withdraw, account,oldFlow,memo);
		}
		return responseVo;
	}
	
	/**
	 * 处理审核结果
	 * @param isSuccess
	 * @param withdraw
	 */
	@Transactional(propagation=Propagation.REQUIRES_NEW)
	public boolean doWithdrawAudit(boolean isSuccess,Withdraw withdraw,Account account,AccountFlow oldFlow,String memo){
		AccountFlow accountFlow = new AccountFlow();
		if(isSuccess){
			withdraw.setStatus(WithdrawStatus.提现成功);
			account.setFreezeAmount(account.getFreezeAmount()-withdraw.getAmount());
			
			accountFlow.setTradeAmount(withdraw.getAmount());
			accountFlow.setTotalAmount(account.getTotalAmount());
			accountFlow.setAvailableAmount(account.getAvailableAmount());
			accountFlow.setFreezeAmount(account.getFreezeAmount()-withdraw.getAmount());
			accountFlow.setTradeDirection(AccountFlowTradeDirection.支出);
		}else{
			//提现失败，解冻提现金额，并记录流水
			withdraw.setStatus(WithdrawStatus.提现失败);
			account.setFreezeAmount(account.getFreezeAmount()-withdraw.getAmount());
			account.setTotalAmount(account.getTotalAmount()+withdraw.getAmount());
			account.setAvailableAmount(account.getAvailableAmount()+withdraw.getAmount());
			
			accountFlow.setTradeAmount(withdraw.getAmount());
			accountFlow.setTotalAmount(account.getTotalAmount()+withdraw.getAmount());
			accountFlow.setAvailableAmount(account.getAvailableAmount()+withdraw.getAmount());
			accountFlow.setFreezeAmount(account.getFreezeAmount()-withdraw.getAmount());
			accountFlow.setTradeDirection(AccountFlowTradeDirection.收入);
		}
		accountFlow.setAccountId(account.getId());
		accountFlow.setFlowType(AccountFlowflowType.提现解冻);
		accountFlow.setFlowCode(codeGeneratorService.getFlowCode());
		accountFlow.setTargetCustomerId(account.getCustomerId());
		accountFlow.setOldFlowCode(oldFlow.getFlowCode());
		accountFlow.setMemo(memo);
		accountFlowService.save(accountFlow);
		withdrawService.save(withdraw);
		save(account);
		return true;
	}
	
	public PageResponse<Map<String, Object>> withdrawList(PageRequestVo pageRequest) {
		return repository.withdrawList(pageRequest);
	}

	public PageResponse<Map<String, Object>> flowList(PageRequestVo pageRequest) {
		if(pageRequest.getParam("accountType")==null || StringUtils.isBlank((String)pageRequest.getParam("accountType"))){
			throw new SLException("110010");
		}
		return repository.flowList(pageRequest);
	}

	public List<Map<String, Object>> flowExport(AccountFlowExportVo accountFlowExportVo, int monthsBetween) {
		String endDate = accountFlowExportVo.getEndDate();
		String startDate = accountFlowExportVo.getStartDate();
		Date endDateD = null;
		Date startDateD = null;
		// 1、判断并设置开始和结束时间
		if (StringUtils.isBlank(endDate) && StringUtils.isBlank(startDate)) {
			endDateD = DateUtil.getToday();
			startDateD = DateUtil.addMonths(endDateD, -monthsBetween);
		} else if ((!StringUtils.isBlank(endDate)) && StringUtils.isBlank(startDate)) {
			endDateD = DateUtil.parseToDate(endDate, "yyyy-MM-dd");
			startDateD = DateUtil.addMonths(endDateD, -monthsBetween);
		} else if ((!StringUtils.isBlank(startDate)) && StringUtils.isBlank(endDate)) {
			startDateD = DateUtil.parseToDate(startDate, "yyyy-MM-dd");
			endDateD = DateUtil.addMonths(startDateD, monthsBetween);
		} else {
			endDateD = DateUtil.parseToDate(endDate, "yyyy-MM-dd");
			startDateD = DateUtil.parseToDate(startDate, "yyyy-MM-dd");
		}
		// 2、判断时间跨度是否大于3个月
		if (DateUtil.addMonths(startDateD, monthsBetween).compareTo(endDateD) < 0) {
			throw new SLException("600008");
		}
		accountFlowExportVo.setEndDate(new SimpleDateFormat("yyyy-MM-dd").format(endDateD));
		accountFlowExportVo.setStartDate(new SimpleDateFormat("yyyy-MM-dd").format(startDateD));
		return repository.flowExport(accountFlowExportVo);
	}

	
	public Account findBycustomerId(String customerId){
		return repository.findByCustomerId(customerId);
	}
	
	/**
	 * app-忘记密码(根据验证码重置交易密码)
	 * 
	 * @author SangLy
	 * @createTime 2016年8月15日 下午6:45:56
	 * @param verificationCode
	 *            验证码
	 * @param password
	 *            密码
	 * @throws SLException
	 */
	@Transactional
	public void appResetPassword(String customerId, String verificationCode, String accountPassword) throws SLException {
		Customer customer = customerService.findOne(customerId);
		if (customer == null) {
			throw new SLException("120027", "Binding this mobile person is not exists in customer table!");
		}
		verificationCodeService.settingVerificationInvalid(customer.getMobile(), verificationCode, BusinessType.交易密码找回);
		Account customerAccount = repository.findBycustomerId(customer.getId());
		if(customerAccount != null){
			customerAccount.setAccountPassword(accountPassword);
			update(customerAccount);
		}else{
			throw new SLException("110012","account not found");
		}
		
	}
	
	/**
	 *  app-app-修改交易密码(根据旧密码更新密码)
	 * 
	 * @author SangLy
	 * @createTime 2016年8月15日 下午6:52:24
	 * @param oldPassword
	 *            旧密码
	 * @param newPassword
	 *            新密码
	 * @param loginUser
	 *            登录用户
	 * @throws SLException
	 */
	@Transactional
	public void appUpdatePassword(String oldPassword, String newPassword, String customerId) throws SLException {
		Customer customer = customerService.findOne(customerId);
		if (customer == null) {
			throw new SLException("120027", "Binding this mobile person is not exists in customer table!");
		}
		Account customerAccount = repository.findBycustomerId(customer.getId());
		if(customerAccount != null){
			if (!oldPassword.equals(customerAccount.getAccountPassword())) {
				throw new SLException("120031", "Old password is wrong!");
			}
			if (newPassword.equals(oldPassword)) {
				throw new SLException("120052", "New password can not be consistent with old password!");
			}
			customerAccount.setAccountPassword(newPassword);
			update(customerAccount);
		}else{
			throw new SLException("110012","account not found");
		}
	}
	
	/**
	 * 根据客户查询客户信息
	 * @author SangLy
	 * @createTime 2016年11月7日 上午11:29:51
	 * @param customerId
	 * @return
	 */
	public Account findAccountByCustomerId(String customerId){
		return repository.findBycustomerId(customerId);
	}
	
	/**
	 * app-提现申请
	 * 
	 * @author SangLy
	 * @createTime 2016年11月7日 上午10:53:17
	 * @param params
	 * @return
	 * @throws SLException
	 */
	@Transactional
	public void withdrawApply(Double amount, String password, String customerId) throws SLException {
		Account account = repository.findByCustomerId(customerId);
		if (!RedPackUtils.encryptionPassword(password,BusinessType.交易密码找回).equals(account.getAccountPassword())) {
			throw new SLException("100028", "交易密码错误");
		}
		
		if (amount < 5) {
			throw new SLException("230002", "提现金额最低为5元");
		}
		// 查询当月提现申请次数，
		Long applyCount = withdrawService.countMonthWithdrawbyCustomerId(customerId, new Date());
		if (applyCount >= 2) {
			throw new SLException("230003", "每月申请提现次数最多为2次");
		}
		// 查询账户
		Account customerAccount = repository.findBycustomerId(customerId);
		if (customerAccount != null) {
			if (customerAccount.getAvailableAmount() - amount >= 0) {
				// 修改账户表
				customerAccount.setAvailableAmount(customerAccount.getAvailableAmount() - amount);
				customerAccount.setFreezeAmount(customerAccount.getFreezeAmount() + amount);
				repository.save(customerAccount);

				// 流水表_新增记录
				AccountFlow accountFlow = new AccountFlow();
				accountFlow.setAccountId(customerAccount.getId());
				accountFlow.setFlowType(AccountFlowflowType.提现冻结);
				// accountFlow.setFlowCode(codeGeneratorService.getFlowCode());
				accountFlow.setTradeDirection(AccountFlowTradeDirection.支出);
				accountFlow.setTradeAmount(amount);
				accountFlow.setTotalAmount(customerAccount.getTotalAmount());
				accountFlow.setAvailableAmount(customerAccount.getAvailableAmount());
				accountFlow.setFreezeAmount(customerAccount.getFreezeAmount());
				accountFlow.setTargetCustomerId(customerId);
				AccountFlow newAccountFlow = accountFlowService.save(accountFlow);

				// 新增银行卡副本
				Bank customerBank = bankService.findBycustomerId(customerId);
				Bank copyCustomerBank = new Bank();
				copyCustomerBank.setCustomerId(customerId);
				copyCustomerBank.setBank(customerBank.getBank());
				copyCustomerBank.setProvince(customerBank.getProvince());
				copyCustomerBank.setCity(customerBank.getCity());
				copyCustomerBank.setBankName(customerBank.getBankName());
				copyCustomerBank.setBankCode(customerBank.getBankCode());
				copyCustomerBank.setCardHolderName(customerBank.getCardHolderName());
				copyCustomerBank.setRecordType(BankRecordType.副本);
				Bank newCppyCustomerBank = bankService.save(copyCustomerBank);

				// 提现申请表_新增记录
				Withdraw withdraw = new Withdraw();
				withdraw.setCustomerId(customerId);
				// withdraw.setWithdrawCode(codeGeneratorService.getWithdrawCode());
				withdraw.setBankId(newCppyCustomerBank.getId());
				withdraw.setAmount(amount);
				withdraw.setFlowId(newAccountFlow.getId());
				withdraw.setStatus(WithdrawStatus.待处理);
				withdrawService.save(withdraw);

			} else {
				throw new SLException("230004", "账户余额不足");
			}
		} else {
			throw new SLException("230005", "账户不存在");
		}
	}
	
	/**
	 * 根据客户id 创建账户
	 * 
	 * @author SangLy
	 * @createTime 2016年11月8日 上午11:14:11
	 * @param customerId
	 */
	@Transactional
	public void saveNewAccount(String customerId) {
		Account account = new Account();
		account.setCustomerId(customerId);
		String accountCode = codeGeneratorService.getAccountCode();
		while (repository.findFirstByAccountCode(accountCode) != null) {
			accountCode = codeGeneratorService.getAccountCode();
		}
		account.setAccountCode(accountCode);
		account.setTotalAmount(0.00);
		account.setAvailableAmount(0.00);
		account.setFreezeAmount(0.00);
		account.setAccountType(AccountType.用户账户);
		repository.save(account);
	}
	
	/**
	 * app-发红包支付(订单支付)(/account/submitOrder)
	 * 
	 * @author SangLy
	 * @createTime 2016年11月7日 上午11:43:31
	 * @param params
	 * @return
	 * @throws SLException
	 */
	public void appSubmitOrder(String orderId, String password, String customerId) {
		Account account = repository.findByCustomerId(customerId);
		if (!RedPackUtils.encryptionPassword(password,BusinessType.交易密码找回).equals(account.getAccountPassword())) {
			throw new SLException("100028", "交易密码错误");
		}
		Order payOrder = orderService.findOne(orderId);
		if (payOrder == null) {
			throw new SLException("240002", "订单不存在");
		}
		
		//判断订单是否已经支付//TODO
		
		//支付订单（修改该用户账户），把订单金额（红包金额+20%的手续费）转入该用户账户的冻结金额中
		account.setAvailableAmount(account.getAvailableAmount()-payOrder.getOrderAmount());
		account.setFreezeAmount(account.getFreezeAmount()+payOrder.getOrderAmount());
		repository.save(account);
		
		//支付流水，只写一笔流水
		AccountFlow accountFlow = new AccountFlow();
		accountFlow.setTotalAmount(account.getTotalAmount());
		accountFlow.setFlowType(AccountFlowflowType.红包冻结);
		accountFlow.setOldFlowCode(null);
		accountFlow.setTargetCustomerId(customerId);
		accountFlow.setMemo("前台用户支付订单");
		accountFlow.setTradeAmount(payOrder.getOrderAmount());
		accountFlow.setAvailableAmount(account.getAvailableAmount());
		accountFlow.setFreezeAmount(account.getFreezeAmount());
		accountFlow.setTradeDirection(AccountFlowTradeDirection.支出);
		accountFlow.setAccountId(account.getId());
		accountFlow.setFlowCode(codeGeneratorService.getFlowCode());
		accountFlowService.save(accountFlow);
	}
	
}
