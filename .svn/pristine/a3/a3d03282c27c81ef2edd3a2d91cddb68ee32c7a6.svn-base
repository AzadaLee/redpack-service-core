/** 
 * @(#)AdvertisementService.java 1.0.0 2016年7月25日 下午3:27:09  
 *  
 * Copyright © 2016 善林金融.  All rights reserved.  
 */

package com.slfinance.redpack.core.services;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.slfinance.redpack.common.utils.DateUtil;
import com.slfinance.redpack.common.utils.MapUtil;
import com.slfinance.redpack.core.constants.TableConstant;
import com.slfinance.redpack.core.constants.enums.RecordType;
import com.slfinance.redpack.core.constants.enums.AdvertisementStatus;
import com.slfinance.redpack.core.constants.enums.AdvertisementType;
import com.slfinance.redpack.core.constants.enums.CustomerRelationType;
import com.slfinance.redpack.core.constants.enums.LogType;
import com.slfinance.redpack.core.constants.enums.UserType;
import com.slfinance.redpack.core.entities.Advertisement;
import com.slfinance.redpack.core.entities.AdvertisementAnswer;
import com.slfinance.redpack.core.entities.CustomerRelation;
import com.slfinance.redpack.core.entities.File;
import com.slfinance.redpack.core.entities.FileRelation;
import com.slfinance.redpack.core.entities.OperateLog;
import com.slfinance.redpack.core.exception.SLException;
import com.slfinance.redpack.core.extend.jpa.page.PageRequestVo;
import com.slfinance.redpack.core.extend.jpa.page.PageResponse;
import com.slfinance.redpack.core.repositories.AdvertisementRepository;
import com.slfinance.redpack.core.services.base.BaseService;
import com.slfinance.redpack.core.vo.AdvertisementVo;

/**
 * 广告
 * 
 * @author SangLy
 * @version $Revision:1.0.0, $Date: 2016年7月25日 下午3:27:09 $
 */
@Service
public class AdvertisementService extends BaseService<Advertisement, AdvertisementRepository> {

	@Autowired
	private CodeGeneratorService codeGeneratorService;

	@Autowired
	private CustomerRelationService customerRelationService;

	@Autowired
	private RedisTemplate<String, String> redisTemplate;

	@Autowired
	OperateLogService operateLogService;

	@Autowired
	private AdvertisementAnswerService advertisementAnswerService;
	
	@Autowired
	private FileService fileService;
	
	@Autowired
	private FileRelationService fileRelationService;
	/**
	 * 根据广告code查询广告
	 * 
	 * @author taoxm
	 * @createTime 2016年8月19日 上午9:42:00
	 * @param advertisementCode
	 * @return
	 */
	public Map<String, Object> findByAdvertisementCode(String advertisementCode) {
		List<String> status = new ArrayList<String>();
		// 只能查询未下架的红包
		status.add(AdvertisementStatus.未下架.name());
		// 只能查出红包广告
		List<String> types = new ArrayList<String>();
		types.add(AdvertisementType.红包广告.name());
		//获取广告信息
		Map<String, Object> result = repository.findByAdvertisementCodeAndStatusAndTypes(advertisementCode, status, types,RecordType.正本.name());
		if (result == null || result.isEmpty()) {
			throw new SLException("500009");
		}
		
		if(UserType.valueOf(MapUtil.getStringTrim(result, "userType")) != UserType.员工){
			throw new SLException("600049");
		}
		
		String advertisementId = (String)result.get("id");
		//获取广告问答信息
		List<Map<String, Object>> answers = advertisementAnswerService.findByAdvertisementId(advertisementId);
		result.put("answers", answers);
		//获取广告文件信息
		List<Map<String, Object>> files = fileService.findByRelateTableAndRelatePrimary(TableConstant.T_ADVERTISEMENT,advertisementId);
		result.put("files", files);
		return result;
	}

	/**
	 * @author taoxm
	 * @createTime 2016年8月24日 下午4:58:28
	 * @param advertisementCode
	 * @return
	 */
	public Advertisement findAdvertisementByAdvertisementCode(String advertisementCode) {
		return repository.findByAdvertisementCode(advertisementCode);
	}

	/**
	 * 保存广告(新增和修改)
	 * 
	 * @author work
	 * @createTime 2016年8月19日 上午9:42:46
	 * @param advertisementVo
	 * @return
	 * @throws ParseException
	 */
	@Transactional
	public Advertisement saveAdvertisement(AdvertisementVo advertisementVo,UserType userType) throws ParseException {
		String id = advertisementVo.getId();
		Advertisement advertisement = null;
		if (StringUtils.isBlank(id)) {// 新增
			advertisement = new Advertisement();
			String advertiserCode = codeGeneratorService.getAdvertiserCode();
			String advertisementCode = codeGeneratorService.getAdvertisementCode();
			advertisement.setAdvertiserCode(advertiserCode);
			advertisement.setAdvertisementCode(advertisementCode);
		} else {// 修改
			advertisement = findOne(id);
			if(advertisement == null){
				throw new SLException("500011");
			}
		}
		// 判断广告类型，如果广告类型为首页广告或分享广告时StartDate和EndDate 必选
		if (AdvertisementType.valueOf(advertisementVo.getType()) == AdvertisementType.首页广告 || AdvertisementType.valueOf(advertisementVo.getType()) == AdvertisementType.分享广告) {
			if (StringUtils.isBlank(advertisementVo.getStartDate()) || StringUtils.isBlank(advertisementVo.getEndDate())) {
				throw new SLException("600015");
			}
			advertisement.setStartDate(DateUtil.parseDate(advertisementVo.getStartDate(), "yyyy-MM-dd"));
			advertisement.setEndDate(DateUtil.parseDate(advertisementVo.getEndDate(), "yyyy-MM-dd"));
		} else {
			if (StringUtils.isNotBlank(advertisementVo.getStartDate())) {
				advertisement.setStartDate(DateUtil.parseDate(advertisementVo.getStartDate(), "yyyy-MM-dd"));
			}
			if (StringUtils.isNotBlank(advertisementVo.getEndDate())) {
				advertisement.setEndDate(DateUtil.parseDate(advertisementVo.getEndDate(), "yyyy-MM-dd"));
			}
		}
		if(advertisement.getStartDate() != null && advertisement.getEndDate() != null){
			// 判断开始时间是否小于结束时间
			if (advertisement.getStartDate().compareTo(advertisement.getEndDate()) > 0) {
				throw new SLException("600020");
			}
		}
		/*广告保存和更新内容
		首页广告：广告类型、广告主、logo、标题、起止时间、广告图片
		邀请广告：广告类型、广告主、logo、标题、起止时间、广告图片、链接地址
		分享广告: 广告类型、广告主、logo、标题、起止时间、广告图片、链接地址
		红包广告：广告类型、广告主、logo、标题、起止时间、广告图片、链接地址、广告题目、答案、正确答案*/
		
		advertisement.setAdvertiserName(advertisementVo.getAdvertiserName());
		advertisement.setLogo(advertisementVo.getLogo());
		if(advertisementVo.getTitle().length()>36){
			throw new SLException("600057");
		}
		advertisement.setTitle(advertisementVo.getTitle());
		advertisement.setType(AdvertisementType.valueOf(advertisementVo.getType()));
		//红包广告时，广告内容（广告题目）不能为空
		if(advertisement.getType() == AdvertisementType.红包广告 && StringUtils.isBlank(advertisementVo.getContent())){
			throw new SLException("500002");
		}
		//广告类型不为首页广告时，广告链接必输
		advertisement.setContent(advertisementVo.getContent());
		if(advertisement.getType() != AdvertisementType.首页广告 && StringUtils.isBlank(advertisementVo.getHyperlink())){
			throw new SLException("600050");
		}
		advertisement.setHyperlink(advertisementVo.getHyperlink());
		advertisement.setUserType(userType);
		advertisement = save(advertisement);//为了设置广告问题中的广告id，需在之前保存
		
		
		//广告文件信息
		List<Map<String, Object>> files = advertisementVo.getFiles();
		for(Map<String, Object> temp : files){
			if(temp.get("id")==null ||StringUtils.isBlank(MapUtil.getStringTrim(temp, "id"))){
				throw new SLException("900001");
			}
			String fileId = MapUtil.getStringTrim(temp, "id");
			File file = fileService.findOne(fileId);
			if(file == null){
				throw new SLException("900002");
			}
			List<FileRelation> fileRelations = fileRelationService.findByFileId(fileId);
			if(fileRelations == null || fileRelations.size()==0){//新增广告信息或者修改了文件信息
				FileRelation fileRelation = new FileRelation();
				fileRelation.setFileId(fileId);
				fileRelation.setRelateTable(TableConstant.T_ADVERTISEMENT);
				fileRelation.setRelatePrimary(advertisement.getId());
				fileRelationService.save(fileRelation);
			}
		}
		//只有红包广告时才有问答信息
		if(advertisement.getType() == AdvertisementType.红包广告){
			//广告问答信息
			Integer correctAnswer = Integer.parseInt(advertisementVo.getCorrectAnswer());
			List<Map<String, Object>> answers = advertisementVo.getAnswers();
			if(answers==null || answers.size()==0){
				throw new SLException("500003");
			}
			for(int i=0;i<answers.size();i++){
				Map<String, Object> temp = answers.get(i);
				AdvertisementAnswer advertisementAnswer = null;
				if(StringUtils.isBlank(MapUtil.getStringTrim(temp, "id"))){
					advertisementAnswer = new AdvertisementAnswer();
				}else{
					String answerId = MapUtil.getStringTrim(temp, "id");
					advertisementAnswer = advertisementAnswerService.findOne(answerId);
					if(advertisementAnswer == null){
						throw new SLException("800001");
					}
				}
				advertisementAnswer.setAnswerContent(MapUtil.getStringTrim(temp, "answerContent"));
				advertisementAnswer.setAdvertisementId(advertisement.getId());
				advertisementAnswer = advertisementAnswerService.save(advertisementAnswer);
				//设置正确答案
				if(i==correctAnswer){
					//此时advertisement已是持久态，jpa会自动保存
					advertisement.setCorrectAnswer(advertisementAnswer.getId());
				}
			}
		}
		
		return advertisement;
	}
	
	/**
	 * app-新建|修改广告
	 * 
	 * @author SangLy
	 * @createTime 2016年11月9日 上午11:54:42
	 * @param advertisementVo
	 * @param userType
	 * @return
	 * @throws Exception
	 */
	@Transactional
	public Advertisement appSaveAdvertisement(Advertisement advertisement, List<Map<String, Object>> files, List<Map<String, Object>> answers) {
		/*
		 * 红包广告：广告类型、广告主、logo、标题、起止时间、广告图片、链接地址、广告题目、答案、正确答案
		 */
		advertisement = save(advertisement);// 为了设置广告问题中的广告id，需在之前保存
		Integer correctAnswer = Integer.parseInt(advertisement.getCorrectAnswer());
		// 广告文件信息
		for (Map<String, Object> temp : files) {
			if (temp.get("id") == null || StringUtils.isBlank(MapUtil.getStringTrim(temp, "id"))) {
				throw new SLException("900001");
			}
			String fileId = MapUtil.getStringTrim(temp, "id");
			File file = fileService.findOne(fileId);
			if (file == null) {
				throw new SLException("900002");
			}
			List<FileRelation> fileRelations = fileRelationService.findByFileId(fileId);
			if (fileRelations == null || fileRelations.size() == 0) {// 新增广告信息或者修改了文件信息
				FileRelation fileRelation = new FileRelation();
				fileRelation.setFileId(fileId);
				fileRelation.setRelateTable(TableConstant.T_ADVERTISEMENT);
				fileRelation.setRelatePrimary(advertisement.getId());
				fileRelationService.save(fileRelation);
			}
		}
		// 只有红包广告时才有问答信息
		for (int i = 0; i < answers.size(); i++) {
			Map<String, Object> temp = answers.get(i);
			AdvertisementAnswer advertisementAnswer = null;
			if (StringUtils.isBlank(MapUtil.getStringTrim(temp, "id"))) {
				advertisementAnswer = new AdvertisementAnswer();
			} else {
				String answerId = MapUtil.getStringTrim(temp, "id");
				advertisementAnswer = advertisementAnswerService.findOne(answerId);
				if (advertisementAnswer == null) {
					throw new SLException("800001");
				}
			}
			advertisementAnswer.setAnswerContent(MapUtil.getStringTrim(temp, "answerContent"));
			advertisementAnswer.setAdvertisementId(advertisement.getId());
			advertisementAnswer = advertisementAnswerService.save(advertisementAnswer);
			// 设置正确答案
			if (i == correctAnswer) {
				// 此时advertisement已是持久态，jpa会自动保存
				advertisement.setCorrectAnswer(advertisementAnswer.getId());
			}
		}
		return advertisement;
	}

	/**
	 * 查询广告列表
	 * 
	 * @author taoxm
	 * @createTime 2016年8月19日 上午9:43:13
	 * @param pageRequest
	 * @return
	 */
	public PageResponse<Advertisement> findAllPage(PageRequestVo pageRequest) {
		PageResponse<Advertisement> advertisements = repository.findAllPage(pageRequest);
		return advertisements;
	}

	/**
	 * 根据id查询广告详情
	 * 
	 * @author work
	 * @createTime 2016年8月19日 上午9:40:11
	 * @param id
	 * @return
	 */
	public Map<String, Object> findOneDetail(String id) {
		Map<String, Object> result = repository.findOneDetail(id);
		if (result == null || result.isEmpty()) {
			throw new SLException("500009");
		}
		List<Map<String, Object>> files = fileService.findByRelateTableAndRelatePrimary(TableConstant.T_ADVERTISEMENT,id);
		result.put("files", files);
		List<Map<String, Object>> answers = advertisementAnswerService.findByAdvertisementId(id);
		result.put("answers", answers);
		return result;
	}

	@Transactional
	public void soldOut(String id) {
		Advertisement advertisement = findOne(id);
		if (null == advertisement) {
			throw new SLException("500009");
		}
		advertisement.setStatus(AdvertisementStatus.已下架);
		save(advertisement);
	}

	/**
	 * 后台管理登录页统计
	 * 
	 * @author taoxm
	 * @createTime 2016年8月19日 上午9:05:11
	 * @return
	 */
	public Map<String, Object> indexPageSummary() {
		return repository.indexPageSummary();
	}

	/**
	 * 查询启动页广告
	 * 
	 * @author SangLy
	 * @createTime 2016年8月17日 下午12:40:51
	 * @return
	 */
	public List<Map<String, Object>> appFindStartPageAdvertisementPhotoList() {
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
		Date day = DateUtil.weedDayBelow(new Date());
		Advertisement advertisement = repository.findFirstByTypeAndStartDateLessThanEqualAndEndDateGreaterThanEqualAndStatusAndRecordTypeOrderByStartDateDesc(AdvertisementType.首页广告, day, day, AdvertisementStatus.未下架,RecordType.正本);
		if (advertisement != null) {
			result = fileService.findByRelateTableAndRelatePrimaryPathURL(TableConstant.T_ADVERTISEMENT,advertisement.getId());
		}
		return result;
	}

	/**
	 * 根据id查询广告
	 *
	 * @author SangLy
	 * @createTime 2016年4月26日 下午2:42:56
	 * @param id
	 *            广告id
	 * @return
	 */
	public Advertisement findById(String id) {
		return findOne(id);
	}

	/**
	 * 任务广告
	 * 
	 * @author SangLy
	 * @createTime 2016年8月18日 上午10:06:51
	 * @return
	 */
	public Advertisement dailyQuest() {
		Date day = DateUtil.weedDayBelow(new Date());
		return repository.findFirstByTypeAndStartDateLessThanEqualAndEndDateGreaterThanEqualAndStatusAndRecordTypeOrderByStartDateDesc(AdvertisementType.分享广告, day, day, AdvertisementStatus.未下架,RecordType.正本);
	}

	/**
	 * app-广告分享
	 * 
	 * @author SangLy
	 * @createTime 2016年8月18日 下午6:52:39
	 * @param id
	 */
	@Transactional
	public void appShare(String id, String customerId) {
		Advertisement advertisement = findOne(id);
		if (advertisement != null) {
			id = (advertisement.getRecordType() == RecordType.副本 && advertisement.getParentId() != null) ? advertisement.getParentId() : id;
			if (StringUtils.isNotBlank(customerId)) {
				// 记录分享
				CustomerRelation customerRelation = new CustomerRelation();
				customerRelation.setCustomerId(customerId);
				customerRelation.setRelateTable(TableConstant.T_ADVERTISEMENT);
				customerRelation.setType(CustomerRelationType.广告分享);
				customerRelation.setRelatePrimary(id);
				customerRelationService.save(customerRelation);
			}
			operateLogService.saveAsync(new OperateLog(UserType.客户, LogType.广告分享, id, customerId, new Date(), null));
		}
	}

	/**
	 * app-点击广告
	 * 
	 * @author SangLy
	 * @createTime 2016年8月18日 下午6:52:39
	 * @param id
	 */
	@Transactional
	public void appClick(String id, String customerId) {
		Advertisement advertisement = findOne(id);
		if (advertisement != null) {
			operateLogService.saveAsync(new OperateLog(UserType.客户, LogType.广告点击, ((advertisement.getRecordType() == RecordType.副本 && advertisement.getParentId() != null) ? advertisement.getParentId() : id), customerId, new Date(), null));
		}
	}
	
	/**
	 * app-广告是否已分享
	 * 
	 * @author SangLy
	 * @createTime 2016年11月2日 下午6:16:41
	 * @param redpackId
	 * @param userId
	 * @return
	 */
	public Boolean hasShared(String advertisementId, String userId) {
		List<Map<String, Object>> hongbaodingyueList = customerRelationService.findListCustomerIdAndRelateTableAndRelatePrimaryAndTypeAndDay(new Date(), userId, TableConstant.T_ADVERTISEMENT, advertisementId, CustomerRelationType.广告分享);
		if (hongbaodingyueList.size() > 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * app-获取广告列表
	 * 
	 * @author SangLy
	 * @createTime 2016年11月3日 上午11:32:40
	 * @param pageRequest
	 * @return
	 * @throws SLException
	 */
	public PageResponse<Map<String, Object>> advertisementList(PageRequestVo pageRequest) throws SLException {
		return repository.advertisementList(pageRequest);
	}
	
	/**
	 * app-获取所有广告(下拉框用到)
	 * 
	 * @author SangLy
	 * @createTime 2016年11月3日 上午11:32:40
	 * @param pageRequest
	 * @return
	 * @throws SLException
	 */
	public List<Map<String, Object>> advertisementSelectList(String customerId,AdvertisementStatus status,RecordType recordType) throws SLException {
		return repository.advertisementSelectList(customerId,status.toString(),recordType.toString());
	}

	/**
	 * app-用户移除广告
	 * 
	 * @author SangLy
	 * @createTime 2016年11月3日 下午8:13:26
	 * @param advertisementId
	 * @param customerId
	 */
	@Transactional
	public void removeAdvertisementById(String advertisementId,String customerId) {
		Advertisement advertisement = repository.findOne(advertisementId);
		if (advertisement == null ) {
			throw new SLException("500009", "advertisementId not find");
		} else {
			if(customerId.equals(advertisement.getCreatedUser())){
				advertisement.setStatus(AdvertisementStatus.已下架);
				repository.save(advertisement);
			}else{
				throw new SLException("500009", "advertisementId not find");
			}
		}
	}
	
	/**
	 * 新建副本信息并保存
	 * 
	 * @param advertisement
	 * @return
	 */
	@Transactional
	public Advertisement copyAdvertisement(Advertisement advertisement) {
		Advertisement newAdvertisement = advertisement.createDuplicate(Advertisement.class);
		newAdvertisement.setRecordType(RecordType.副本);
		newAdvertisement.setParentId(advertisement.getId());
		return save(newAdvertisement);
	}
	
	/**
	 * 根据红包id查询广告信息
	 * 
	 * @author samson
	 * @createTime 2016年11月12日 上午8:50:51
	 * @param redpackId
	 * @return
	 */
	public Advertisement findByRedpackId(String redpackId) {
		return repository.findByRedpackId(redpackId);
	}
}
