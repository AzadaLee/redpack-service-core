/** 
 * @(#)RedpackService.java 1.0.0 2016年7月26日 上午10:01:03  
 *  
 * Copyright © 2016 善林金融.  All rights reserved.  
 */

package com.slfinance.redpack.core.services;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.slfinance.redpack.common.utils.DateUtil;
import com.slfinance.redpack.common.utils.MapUtil;
import com.slfinance.redpack.core.constants.RedPackConstant;
import com.slfinance.redpack.core.constants.TableConstant;
import com.slfinance.redpack.core.constants.enums.AdvertisementType;
import com.slfinance.redpack.core.constants.enums.AmountOrder;
import com.slfinance.redpack.core.constants.enums.CustomerRelationType;
import com.slfinance.redpack.core.constants.enums.RedpackStatus;
import com.slfinance.redpack.core.constants.enums.RedpackType;
import com.slfinance.redpack.core.entities.Advertisement;
import com.slfinance.redpack.core.entities.RedPack;
import com.slfinance.redpack.core.exception.SLException;
import com.slfinance.redpack.core.extend.jpa.page.PageRequestVo;
import com.slfinance.redpack.core.extend.jpa.page.PageResponse;
import com.slfinance.redpack.core.repositories.RedPackRepository;
import com.slfinance.redpack.core.services.base.BaseService;
import com.slfinance.redpack.core.vo.RedPackExportExcelVo;

/**
 * 红包
 * 
 * @author SangLy
 * @version $Revision:1.0.0, $Date: 2016年7月26日 上午10:01:03 $
 */
@Service
public class RedPackService extends BaseService<RedPack, RedPackRepository> {

	@Autowired
	private AdvertisementService advertisementService;

	@Autowired
	private CustomerRelationService customerRelationService;

	/**
	 * 设置红包状态
	 * 
	 * @author taoxm
	 * @createTime 2016年8月17日 下午1:50:12
	 * @param id
	 * @param status
	 * @return
	 */
	@Transactional
	public RedPack updateStatus(String id, String status) {
		RedPack redpack = findOne(id);
		if (null == redpack) {
			throw new SLException("600003");
		}
		// 1、只有当红包状态为为开启的时候，才能修改状态
		if (redpack.getStatus() != RedpackStatus.未开启) {
			throw new SLException("600013");
		}
		// 2、只能将红包的状态修改为"已下架"
		if (RedpackStatus.valueOf(status) != RedpackStatus.已失效) {
			throw new SLException("600014");
		}
		// 3、当天的红包不能下架
		if (DateUtil.getToday().compareTo(DateUtil.parseToDate(new SimpleDateFormat("yyyy-MM-dd").format(redpack.getTimePoint()), "yyyy-MM-dd")) == 0) {
			throw new SLException("600019");
		}
		redpack.setStatus(RedpackStatus.valueOf(status));
		return save(redpack);
	}

	/**
	 * 新建和修改红包
	 * 
	 * @author taoxm
	 * @createTime 2016年8月17日 下午1:50:27
	 * @param redpack
	 *            红包对象实体
	 * @param advertisementCode
	 *            广告编码
	 * @param isSave
	 *            true ? 新建红包:修改红包
	 */
	@Transactional
	public RedPack saveRedPacket(RedPack redpack, String advertisementCode, boolean isSave) {
		Advertisement advertisement = advertisementService.findAdvertisementByAdvertisementCode(advertisementCode);
		if (advertisement == null) {
			throw new SLException("500009");
		}
		// 1、新建红包 ? 红包开启时间需在当前时间30mins以后 : 红包的开启时间需在当前时间5mins以后
		if (isSave) {
			if (DateUtil.addMinutes(redpack.getTimePoint(), -RedPackConstant.REDPACK_SAVE_BEFORE_NOW_MINS).compareTo(new Date()) < 0) {
				throw new SLException("600016");
			}
		} else {
			if (DateUtil.addMinutes(redpack.getTimePoint(), -RedPackConstant.REDPACK_MODIFY_BEFORE_NOW_MINS).compareTo(new Date()) < 0) {
				throw new SLException("600009");
			}
		}
//		// 2、红包金额必须大于0.01元
//		if (redpack.getAmount().compareTo(0.01 * redpack.getTotalPersonTime()) < 0) {
//			throw new SLException("600010");
//		}
//		// 3、判断广告类型是否为红包广告(只有红包广告才能创建红包)
//		if (advertisement.getType() != AdvertisementType.红包广告) {
//			throw new SLException("600023");
//		}
		// 4、判断红包口令是否合法
		isShibbolethValid(redpack, isSave);
		// 5、保存红包
		redpack.setAdvertisementId(advertisement.getId());
		return save(redpack);
	}

	/**
	 * 判断红包口令是否合法 合法口令：
	 * 
	 * @author taoxm
	 * @createTime 2016年8月31日 下午5:32:24
	 * @param shibboleth
	 * @return
	 */
	private boolean isShibbolethValid(RedPack redpack, boolean isSave) {
		boolean flag = true;// 备扩展用
		// 1、是否和为开启的红包口令重复
//		String shibboleth = redpack.getShibboleth();
//		List<RedPack> redPacks = findByStatusAndShibboleth(RedpackStatus.未开启, shibboleth);
//		if (redPacks != null && redPacks.size() > 0) {
//			if (isSave) {
//				throw new SLException("600027");
//			} else {// 修改红包时，判断口令相同的红包是不是正在修改的红包
//				for (RedPack r : redPacks) {
//					if (!r.getId().equals(redpack.getId())) {
//						throw new SLException("600027");
//					}
//				}
//			}
//		}
//		/*
//		 * 2、口令格式 1)、中文1~6位+数字8位(数字必须是8位，且数字不能重复) 2)、8位纯数字(不能重复)
//		 * 总结：1、必须以数字结尾，2、数字必须是8位，且不能重复，3、若已中文开头，必须是小于等于6位
//		 */
//		// 2.1、不能有空格
//		if (shibboleth.indexOf(" ") >= 0) {
//			throw new SLException("600026");
//		}
//		String numberString = shibboleth.substring(shibboleth.length() - 8);
//		String charString = shibboleth.substring(0, shibboleth.length() - 8);// 如果为口令为8位纯数字，该字符串为空
//		// 2.2、后8位是否全为数字
//		if (!isAllNumberString(numberString)) {
//			throw new SLException("600028");
//		}
		// 2.3、后8位数字不能重复
//		if (hasRepeatChar(numberString)) {
//			throw new SLException("600029");
//		}
//		// 2.4、若口令中含有中文
//		if (!org.springframework.util.StringUtils.isEmpty(charString)) {
//			if (!isChineseCharString(charString)) {
//				throw new SLException("600030");
//			}
//		}
		return false;
	}

	/**
	 * 判断字符串是否全为中文
	 * 
	 * @author taoxm
	 * @createTime 2016年9月1日 上午9:01:52
	 * @param charString
	 * @return
	 */
	private boolean isChineseCharString(String charString) {
		boolean temp = false;
		String reg = "[\\u4e00-\\u9fa5]+";// 表示+表示一个或多个中文
		if (charString.matches(reg)) {
			temp = true;
		}
		return temp;
	}

	/**
	 * 判断字符串是否为数字字符串 true:字符串为数字字符串;false:字符串中含有非数字字符
	 * 
	 * @author taoxm
	 * @createTime 2016年9月1日 上午9:16:32
	 * @param numberString
	 * @return
	 */
	private boolean isAllNumberString(String numberString) {
		boolean flag = true;
		for (int i = 0; i < numberString.length(); i++) {
			if (!Character.isDigit(numberString.charAt(i))) {
				flag = false;
				break;
			}
		}
		return flag;
	}

	/**
	 * 字符串中是否有重复的字符 true:含有重复的字符;false:不含重复的字符
	 * 
	 * @author taoxm
	 * @createTime 2016年8月31日 下午7:41:56
	 * @param str
	 * @return
	 */
	private boolean hasRepeatChar(String str) {
		boolean flag = false;
		for (int i = 0; i < str.length(); i++) {
			if (str.indexOf(str.charAt(i)) < i) {
				flag = true;
				break;
			}
		}
		return flag;
	}


	/**
	 * 查询红包列表
	 * 
	 * @author taoxm
	 * @createTime 2016年8月17日 下午1:50:49
	 * @param pageRequest
	 * @return
	 */
	public PageResponse<Map<String, Object>> findAllPage(PageRequestVo pageRequest) {
		return repository.findAllPage(pageRequest);
	}

	/**
	 * 查询单个红包详情
	 * 
	 * @author taoxm
	 * @createTime 2016年8月17日 下午1:51:37
	 * @param id
	 * @return
	 * @throws Exception
	 */
	public Map<String, Object> findRedpackAndAdvertisementInfo(String id) throws Exception {
		Map<String, Object> result = repository.findRedpackAndAdvertisementInfo(id);
		if (null == result || result.isEmpty()) {
			throw new SLException("600003");
		}
		String advertisementId = MapUtil.getStringTrim(result, "advertisementId");
		return result;
	}

	/**
	 * 根据传入的日期计算红包总发送次数 其中不包括"已下架"的红包
	 * 
	 * @author SangLy
	 * @createTime 2016年8月16日 下午2:53:41
	 * @param day
	 *            日期
	 * @return
	 */
	public Long todayTotalCount(Date day) {
		Date date = DateUtil.weedDayBelow(day);
		List<String> status = new ArrayList<String>();
		status.add(RedpackStatus.未开启.toString());
		status.add(RedpackStatus.正开启.toString());
		status.add(RedpackStatus.已开启.toString());
		return repository.todayRedpackCount(date, status); 
	}

	/**
	 * 根据传入的日期计算红包已经发送的次数
	 * 
	 * @author SangLy
	 * @createTime 2016年8月16日 下午2:53:41
	 * @param day
	 *            日期
	 * @return
	 */
	public Long todaySentCount(Date day) {
		Date date = DateUtil.weedDayBelow(day);
		List<String> status = new ArrayList<String>();
		status.add(RedpackStatus.正开启.toString());
		status.add(RedpackStatus.已开启.toString());
		return repository.todayRedpackCount(date, status); 
	}

	/**
	 * 距离系统时间最近的当天还没有开启的红包
	 * 
	 * @author SangLy
	 * @createTime 2016年8月16日 下午5:01:52
	 * @param systemTime
	 *            系统时间 格式：2016-8-16 17:28:17
	 * @return
	 */
	public RedPack findCloselyHaveNotOpen(Date systemTime) {
		Date date = DateUtil.weedDayBelow(systemTime);
		return repository.findCloselyHaveNotOpen(date, systemTime, RedpackStatus.未开启.toString());
	}

	/**
	 * 距离当天时间最近的还没有开启的红包，例如系统时间11点。9点场次的红包由于某种原因是“未开启”状态，则查询出的是9点场次的红包
	 * 
	 * @author SangLy
	 * @createTime 2016年8月16日 下午5:01:52
	 * @param systemTime
	 *            系统时间 格式：2016-8-16 17:28:17
	 * @return
	 */
	public RedPack findCloselyDayHaveNotOpen(Date systemTime) {
		Date date = DateUtil.weedDayBelow(systemTime);
		return repository.findCloselyDayHaveNotOpen(date, RedpackStatus.未开启.toString());
	}

	/**
	 * 距离系统时间最近的正在开启的红包
	 * 
	 * @author SangLy
	 * @createTime 2016年8月16日 下午5:01:52
	 * @param systemTime
	 *            系统时间 格式：2016-8-16 17:28:17
	 * @return
	 */
	public RedPack findCloselyHaveOpening(Date systemTime) {
		Date date = DateUtil.weedDayBelow(systemTime);
		return repository.findCloselyHaveOpening(date, systemTime, RedpackStatus.正开启.toString());
	}

	/**
	 * 距离当天时间最近“正开启”的红包，例如系统时间11点。9点场次的红包由于某种原因是“正开启”状态没有变成“已开启”， 则查询出的是9点场次的红包
	 * 
	 * @author SangLy
	 * @createTime 2016年8月16日 下午5:01:52
	 * @param systemTime
	 *            系统时间 格式：2016-8-16 17:28:17
	 * @return
	 */
	public RedPack findCloselyDayHaveOpening(Date systemTime) {
		Date date = DateUtil.weedDayBelow(systemTime);
		return repository.findCloselyDayHaveOpening(date, RedpackStatus.正开启.toString());
	}

	/**
	 * 导出红包
	 * 
	 * @author taoxm
	 * @createTime 2016年8月17日 下午1:52:00
	 * @param redPackExportExcelVo
	 * @param monthsBetween
	 * @return
	 */
	public List<Map<String, Object>> exportExcel(RedPackExportExcelVo redPackExportExcelVo, int monthsBetween) {
		String endTimePoint = redPackExportExcelVo.getEndTimePoint();
		String startTimePoint = redPackExportExcelVo.getStartTimePoint();
		Date endTimePointD = null;
		Date startTimePointD = null;
		// 1、判断并设置开始和结束时间
		if (StringUtils.isBlank(endTimePoint) && StringUtils.isBlank(startTimePoint)) {
			endTimePointD = DateUtil.getToday();
			startTimePointD = DateUtil.addMonths(endTimePointD, -monthsBetween);
		} else if ((!StringUtils.isBlank(endTimePoint)) && StringUtils.isBlank(startTimePoint)) {
			endTimePointD = DateUtil.parseToDate(endTimePoint, "yyyy-MM-dd");
			startTimePointD = DateUtil.addMonths(endTimePointD, -monthsBetween);
		} else if ((!StringUtils.isBlank(startTimePoint)) && StringUtils.isBlank(endTimePoint)) {
			startTimePointD = DateUtil.parseToDate(startTimePoint, "yyyy-MM-dd");
			endTimePointD = DateUtil.addMonths(startTimePointD, monthsBetween);
		} else {
			endTimePointD = DateUtil.parseToDate(endTimePoint, "yyyy-MM-dd");
			startTimePointD = DateUtil.parseToDate(startTimePoint, "yyyy-MM-dd");
		}
		// 2、判断时间跨度是否大于3个月
		if (DateUtil.addMonths(startTimePointD, monthsBetween).compareTo(endTimePointD) < 0) {
			throw new SLException("600008");
		}
		redPackExportExcelVo.setEndTimePoint(new SimpleDateFormat("yyyy-MM-dd").format(endTimePointD));
		redPackExportExcelVo.setStartTimePoint(new SimpleDateFormat("yyyy-MM-dd").format(startTimePointD));
		return repository.exportExcel(redPackExportExcelVo);
	}

	/**
	 * 根据id查询红包
	 *
	 * @author SangLy
	 * @createTime 2016年4月26日 下午2:42:56
	 * @param id
	 *            红包id
	 * @return
	 */
	public RedPack findById(String id) {
		return findOne(id);
	}

	/**
	 * app-红包里列表
	 * 
	 * @author SangLy
	 * @createTime 2016年8月19日 上午9:41:14
	 * @param pageRequest
	 * @return
	 */
	public PageResponse<Map<String, Object>> appRedpackListSort(PageRequestVo pageRequest) throws SLException {
		// 排序条件
		String type = (String) pageRequest.getParam("type"); // 值为：初始化、全部、淘金、捡漏
		String amountOrder = (String) pageRequest.getParam("amountOrder"); // 对应页面金额的升降（值为，ASC,DESC）

		// 校验参数并设定参数值
		validationAndsetParamOfRedpacklist(pageRequest);

		// 一、全部
		/**
		 * 1.如果所有的参数为空则，按照全部，排序规则为： a.正在开启，未开启时间正排序，b.未开启，时间正序，c.已开启，时间倒序
		 */
		if (StringUtils.isBlank(type) && StringUtils.isBlank(amountOrder)) {
			return repository.appRedpackAllDefaultSort(pageRequest);
		}
		/**
		 * 2.全部，并且金额排序不为空，按照金额排序，如果金额相同，按照开启时间正序
		 */
		if (StringUtils.isBlank(type) && StringUtils.isNotBlank(amountOrder)) {
			if (AmountOrder.ASC.toString().equals(amountOrder)) {
				return repository.appRedpackAllByAmountOrderAsc(pageRequest);
			} else if (AmountOrder.DESC.toString().equals(amountOrder)) {
				return repository.appRedpackAllByAmountOrderDsc(pageRequest);
			}
		}
		// 二、淘金
		/**
		 * 默认，正在开启放前，未开启放后，按照开启时间正序
		 */
		if ("淘金".equals(type) && StringUtils.isBlank(amountOrder)) {
			return repository.appRedpackTaoJinByDefaultSort(pageRequest);
		}
		if ("淘金".equals(type) && StringUtils.isNotBlank(amountOrder)) {
			if (AmountOrder.ASC.toString().equals(amountOrder)) {
				return repository.appRedpackTaoJinByAmountOrderAsc(pageRequest);
			} else if (AmountOrder.DESC.toString().equals(amountOrder)) {
				return repository.appRedpackTaoJinByAmountOrderDsc(pageRequest);
			}
		}
		// 三、捡漏
		/**
		 * 默认：开启时间倒序
		 */
		if ("捡漏".equals(type) && StringUtils.isBlank(amountOrder)) {
			return repository.appRedpackJianlouByDefaultSort(pageRequest);
		}
		if ("捡漏".equals(type) && StringUtils.isNotBlank(amountOrder)) {
			if (AmountOrder.ASC.toString().equals(amountOrder)) {
				return repository.appRedpackJianlouByAmountOrderAsc(pageRequest);
			} else if (AmountOrder.DESC.toString().equals(amountOrder)) {
				return repository.appRedpackJianlouByAmountOrderDsc(pageRequest);
			}
		}
		return null;
	}

	// 红包列表设置时间参数
	@SuppressWarnings("deprecation")
	private void validationAndsetParamOfRedpacklist(PageRequestVo pageRequest) {

		Date systemTime = new Date();
		Date queryStartTimePoint = DateUtil.weedDayBelow(systemTime);
		Date queryEndTimePoint = DateUtil.weedDayBelow(systemTime);

		String startTimePoint = MapUtils.getString(pageRequest.getParams(), "startTimePoint");
		String endTimePoint = MapUtils.getString(pageRequest.getParams(), "endTimePoint");
		String startAmount = MapUtils.getString(pageRequest.getParams(), "startAmount");
		String endAmount = MapUtils.getString(pageRequest.getParams(), "endAmount");
		String amountOrder = MapUtils.getString(pageRequest.getParams(), "amountOrder");
		String type = MapUtils.getString(pageRequest.getParams(), "type");

		try {
			if (StringUtils.isNotBlank(startTimePoint)) {
				queryStartTimePoint.setHours(Integer.parseInt(startTimePoint));
			}
			if (StringUtils.isNotBlank(endTimePoint)) {
				queryEndTimePoint.setHours(Integer.parseInt(endTimePoint));
			} else {
				queryEndTimePoint.setHours(23);
				queryEndTimePoint.setMinutes(59);
				queryEndTimePoint.setSeconds(59);
			}
			if (StringUtils.isNotBlank(amountOrder)) {
				if (AmountOrder.valueOf(amountOrder) == null) {
					throw new Exception();
				}
			}
			if (!"".equals(type) && !"淘金".equals(type) && !"捡漏".equals(type)) {
				throw new Exception();
			}

			// 设置参数
			Date day = DateUtil.weedDayBelow(systemTime);
			pageRequest.addParam("day", day);
			pageRequest.addParam("startTimePoint", queryStartTimePoint);
			pageRequest.addParam("endTimePoint", queryEndTimePoint);
			if (StringUtils.isNotBlank(startAmount)) {
				pageRequest.addParam("startAmount", Double.parseDouble(startAmount));
			}
			if (StringUtils.isNotBlank(endAmount)) {
				pageRequest.addParam("endAmount", Double.parseDouble(endAmount));
			}

		} catch (Exception e) {
			throw new SLException("100000", "param wors wrong");
		}
	}

	/**
	 * app-我的红包预约列表
	 * 
	 * @author SangLy
	 * @createTime 2016年8月19日 下午4:54:07
	 * @param pageRequest
	 * @return
	 */
	public PageResponse<Map<String, Object>> appGetSubscription(PageRequestVo pageRequest) {
		return repository.appGetSubscription(pageRequest);
	}

	/**
	 * app-获取红包口令
	 * 
	 * @author SangLy
	 * @createTime 2016年8月22日 上午10:25:18
	 * @param id
	 *            红包id
	 * @param userId
	 *            用户id
	 * @return
	 */
	@SuppressWarnings("deprecation")
	public Map<String, Object> appGetShibboleth(String redpackId, String correctAnswer, String userId) throws SLException {
		Map<String, Object> result = new HashMap<String, Object>();
		RedPack redpack = findOne(redpackId);
		if (redpack != null) {
			Date systemTime = new Date();
			if (redpack.getRedpackType().equals(RedpackType.分享)) {
				// 分享任务
				Advertisement dailyQuestAdvertisement = advertisementService.dailyQuest();
				if(dailyQuestAdvertisement != null){
					List<Map<String, Object>> hongbaofenxiangList = customerRelationService.findListCustomerIdAndRelateTableAndRelatePrimaryAndTypeAndDay(systemTime, userId, TableConstant.T_ADVERTISEMENT, dailyQuestAdvertisement.getId(), CustomerRelationType.广告分享);
					if (hongbaofenxiangList.size() < 0) {
						result.put("condition", "3");
						return result;
					}
				}
			} else if (redpack.getRedpackType().equals(RedpackType.邀请)) {
				List<Map<String, Object>> hongbaoyaoqingList = customerRelationService.findListCustomerIdAndRelateTableAndTypeAndDay(systemTime, userId, CustomerRelationType.好友邀请);
				List<Map<String, Object>> userRegisterLog = customerRelationService.findListRelatePrimaryAndRelateTableAndTypeAndDay(systemTime, userId, CustomerRelationType.好友邀请);
				if (hongbaoyaoqingList.size() < 0 && userRegisterLog.size() < 0) {
					result.put("condition", "3");
					return result;
				}
			}
			//判断收红包是否抢光//TODO
			
			//根据红包id获取答案
			String answerByRedpackId = getAnswerByRedpackId(redpackId);
			if(correctAnswer.equals(answerByRedpackId)){
				result.put("condition", "0");
				return result;
			}else{
				result.put("condition", "1");
				return result;
			}
			
		} else {
			throw new SLException("600012", "no redpack find by id");
		}
	}
	
	/**
	 * 根据红包id获取答案
	 * @author SangLy
	 * @createTime 2016年11月2日 下午2:00:01
	 * @param redpackId
	 * @return
	 */
	public String getAnswerByRedpackId(String redpackId){
		return repository.getAnswerByRedpackId(redpackId);
	}

	/**
	 * 红包订阅
	 * 
	 * @author SangLy
	 * @createTime 2016年8月31日 上午11:20:45
	 * @param redpackId
	 * @param userId
	 */
	public void appointment(String redpackId, String userId) {
		// 先判断此红包是否已经订阅
		List<Map<String, Object>> hongbaodingyueList = customerRelationService.findListCustomerIdAndRelateTableAndRelatePrimaryAndTypeAndDay(new Date(), userId, TableConstant.T_REDPACK, redpackId, CustomerRelationType.红包订阅);
		if (hongbaodingyueList.size() > 0) {
			throw new SLException("600011", "this Redpack have subscribed");
		}
		// 判断红包是否存在
		RedPack redpack = findById(redpackId);
		if (redpack == null) {
			throw new SLException("600012", "not found redpack by id");
		}
		Date systemTime = new Date();
		if (systemTime.getTime() > redpack.getTimePoint().getTime()) {
			throw new SLException("600017", "红包已经开启");
		}
		Date dayHour20 = DateUtil.weedDayBelow(new Date());
		Date dayHour21 = DateUtil.weedDayBelow(new Date());
		dayHour20.setHours(20);
		dayHour21.setHours(21);
		// 20点钟分享任务 --关联表为广告表,关联表主键是此红包的广告
		if (redpack.getTimePoint().getTime() == dayHour20.getTime()) {
			List<Map<String, Object>> hongbaofenxiangList = customerRelationService.findListCustomerIdAndRelateTableAndRelatePrimaryAndTypeAndDay(systemTime, userId, TableConstant.T_ADVERTISEMENT, redpack.getAdvertisementId(), CustomerRelationType.广告分享);
			if (hongbaofenxiangList.size() < 0) {
				throw new SLException("600021", "20点红包需要解锁");
			}
		}
		// 21点钟邀请任务-- 关联表为前端客户表
		if (redpack.getTimePoint().getTime() == dayHour21.getTime()) {
			List<Map<String, Object>> hongbaoyaoqingList = customerRelationService.findListCustomerIdAndRelateTableAndTypeAndDay(systemTime, userId, CustomerRelationType.好友邀请);
			List<Map<String, Object>> userRegisterLog = customerRelationService.findListRelatePrimaryAndRelateTableAndTypeAndDay(systemTime, userId, CustomerRelationType.好友邀请);
			if (hongbaoyaoqingList.size() < 0 && userRegisterLog.size() < 0) {
				throw new SLException("600022", "21点红包需要解锁");
			}
		}
		if (DateUtil.addMinutes(new Date(), RedPackConstant.BEFORE_START_REDPACK_TIME_MINITS_NOT_DINGYUE.intValue()).getTime() >= redpack.getTimePoint().getTime()) {
			throw new SLException("600018", RedPackConstant.BEFORE_START_REDPACK_TIME_MINITS_NOT_DINGYUE + "分钟之内无法订阅");
		} else {
			customerRelationService.saveCustomerRelation(userId, TableConstant.T_REDPACK, redpackId, CustomerRelationType.红包订阅);
		}
	}

}
